#include "smartstreetlight_lcu.h"
#include "smartstreetlight_dcu.h"
#include "smartstreetlight_sql.h"
#include "smartstreetlight_soap.h"
#include "smartstreetlight_ui_method.h"
#include "mapviewer.h"
#include "smartstreetlight_utils.h"
#include <gtk/gtk.h>
#include "gsoap/soapH.h"

GtkTreeView *lcu_info_tree_view;
GtkListStore *lcu_info_list_store;
GtkListStore *lcu_info_list_dcu_combobox;

struct SPL_LCU_POPUP_MENU *lcu_info_popup_menu = NULL;

struct SPL_LCU_Widgets *lcu_widgets = NULL;

static void smartstreetlight_view_init();

static gboolean smartstreetlight_lcu_tree_view_init(void);

static gboolean smartstreetlight_lcu_list_store_init(void);

void smartstreetlight_lcu_dcu_list_combobox_fill(gchar *dcu_name);

static gboolean smartstreetlight_lcu_popup_menu_init(void);

static void smartstreetlight_lcu_popup_menu_widget_init(void);
static void smartstreetlight_lcu_popup_menu_callback_init(void);

static void smartstreetlight_lcu_popup_menu_clicked(GtkWidget *popup_menu_item, gpointer userdata);
static gboolean smartstreetlight_lcu_popup_menu_add_clicked(void);
static gboolean smartstreetlight_lcu_popup_menu_control_clicked(void);
static void smartstreetlight_lcu_popup_menu_remove_clicked(void);
static void smartstreetlight_lcu_popup_menu_remove_all_clicked(void);


/** *********************************************************************************************** **/

static gboolean smartstreetlight_lcu_popup_menu_add_clicked(void)
{
    DEBUG_1();
    DEBUG("===== ENTER ADD LCU =====");

    gboolean exit_here = FALSE;

    GtkWidget *add_lcu_entry_id = GTK_WIDGET(SPL_OBJECT("add_lcu_entry_id"));
    GtkWidget *add_lcu_combobox_mode = GTK_WIDGET(SPL_OBJECT("add_lcu_combobox_mode"));
    GtkWidget *add_lcu_entry_gps = GTK_WIDGET(SPL_OBJECT("add_lcu_entry_gps"));
    GtkWidget *add_lcu_entry_note = GTK_WIDGET(SPL_OBJECT("add_lcu_entry_note"));

    GtkWidget *add_lcu_label_error = GTK_WIDGET(SPL_OBJECT("add_lcu_label_error"));

    gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), FALSE);
    gint response_id = gtk_dialog_run((GtkDialog *)main_widgets->add_lcu_dialog);

    const gchar *lcu_dcuid = gtk_label_get_text(GTK_LABEL(SPL_OBJECT("lb_dcu_id")));
    const gchar *lcu_id = gtk_entry_get_text(GTK_ENTRY(add_lcu_entry_id));


    switch(response_id)
    {
        case DIALOG_OK_RESPONSE:
            gint lcu_mode;
            if(g_strcmp0(lcu_id, "")==0)
            {
                gtk_label_set_text(GTK_LABEL(add_lcu_label_error), "Thông tin mã LCU không được để trống!");
            }
            else
            {
                lcu_mode = gtk_combo_box_get_active(GTK_COMBO_BOX(add_lcu_combobox_mode));
                if(lcu_mode == -1)
                {
                    gtk_label_set_text(GTK_LABEL(add_lcu_label_error), "Xin chọn mode hoạt động cho LCU.");
                }
                else
                {
                    if (smartstreetlight_lcu_add_execute(smartstreetlight_username,
                                                 smartstreetlight_session_id,
                                                 lcu_id,
                                                 lcu_dcuid,
                                                 lcu_mode,
                                                 gtk_entry_get_text(GTK_ENTRY(add_lcu_entry_gps)),
                                                 gtk_entry_get_text(GTK_ENTRY(add_lcu_entry_note))
                                                 ))
                    {
                        DEBUG_1();
                        DEBUG("\n Add LCU is OK !!\n");
                    }

                    exit_here = TRUE;
                }


            }
            break;
        case DIALOG_CANCEL_RESPONSE:
            exit_here = TRUE;
            break;
        default:
            break;
	}

    if(exit_here)
    {
        gtk_entry_set_text(GTK_ENTRY(add_lcu_entry_gps), "");
        gtk_entry_set_text(GTK_ENTRY(add_lcu_entry_note), "");
        gtk_entry_set_text(GTK_ENTRY(add_lcu_entry_id), "");
        gtk_combo_box_set_active(GTK_COMBO_BOX(add_lcu_combobox_mode), -1);
        gtk_label_set_text(GTK_LABEL(add_lcu_label_error), "");
    }
    gtk_widget_hide(main_widgets->add_lcu_dialog);
    gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), TRUE);
    return exit_here;
}


static gboolean smartstreetlight_lcu_popup_menu_control_clicked(void)
{
#if 1
    DEBUG_1();

    GtkTreeIter      iter;
    GtkTreeModel     *model;
    GtkTreeSelection *selection;
    gchar *dcu_id = NULL;
    gint lcu_level;
    gint lcu_ison;
    gint lcu_mode;

    GString *lcu_id_list = g_string_new(NULL);

    selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(lcu_info_tree_view));

    GList *rows_selected = gtk_tree_selection_get_selected_rows(GTK_TREE_SELECTION(selection), NULL);

    DEBUG("\n g_list_length(rows_selected): %d", g_list_length(rows_selected));

    gchar *lcu_id;
    if(rows_selected)
    {
        GList *row = rows_selected;
        gint row_count = 1;
        gint row_length = g_list_length(rows_selected);
        for( ; row ; row = g_list_next(row))
        {
            row_count++;
            gtk_tree_model_get_iter(GTK_TREE_MODEL(lcu_info_list_store),
                                    &iter,
                                    (GtkTreePath*)row->data);
            gtk_tree_model_get(GTK_TREE_MODEL(lcu_info_list_store), &iter, LCU_ID_COLUMN, &lcu_id, -1);
            if(dcu_id==NULL)
            {
                gtk_tree_model_get(GTK_TREE_MODEL(lcu_info_list_store), &iter, LCU_DCUID_COLUMN, &dcu_id, -1);
            }
            DEBUG("\n === lcu_id: %s", lcu_id);

            g_string_append(lcu_id_list, lcu_id);
            if(row_count<=row_length)
            {
                g_string_append(lcu_id_list, "-");
            }

            g_free(lcu_id);

        }
        g_list_free(rows_selected);
    }
    else
    {
        return FALSE;
    }

    GtkWidget *lcu_control_label_id = GTK_WIDGET(SPL_OBJECT("lcu_control_label_id"));
    GtkWidget *lcu_control_combobox_mode = GTK_WIDGET(SPL_OBJECT("lcu_control_combobox_mode"));
    GtkWidget *lcu_control_switch_on_off = GTK_WIDGET(SPL_OBJECT("lcu_control_switch_on_off"));
    GtkWidget *lcu_control_label_program_name = GTK_WIDGET(SPL_OBJECT("lcu_control_label_program_name"));

    gtk_combo_box_set_active(GTK_COMBO_BOX(lcu_control_combobox_mode),
                            (gint)SPL_LCU_ManualMode);

    gtk_switch_set_active(GTK_SWITCH(lcu_control_switch_on_off), FALSE);
    gtk_widget_set_sensitive(GTK_WIDGET(lcu_widgets->lcu_scale_light_level), FALSE);
    gtk_adjustment_set_value(GTK_ADJUSTMENT(lcu_widgets->lcu_adjustment_light_level), 0);

//    smartstreetlight_get_schedule_list_execute(smartstreetlight_username,
//                                               smartstreetlight_session_id,
//                                               gtk_label_get_text(GTK_LABEL(lcu_control_label_program_name)),
//                                               LISTSTORE_PROGRAM_LCU_CONTROL);

    gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), FALSE);
    gint response_id = gtk_dialog_run(GTK_DIALOG(main_widgets->lcu_control_dialog));

    switch(response_id)
    {
        case DIALOG_OK_RESPONSE:

             lcu_level = (gint)gtk_adjustment_get_value(GTK_ADJUSTMENT(lcu_widgets->lcu_adjustment_light_level));
             lcu_ison = (gint)gtk_switch_get_active(GTK_SWITCH(lcu_control_switch_on_off));
             lcu_mode = gtk_combo_box_get_active(GTK_COMBO_BOX(lcu_control_combobox_mode));
             if (smartstreetlight_lcu_control_execute(smartstreetlight_username,
                                                 smartstreetlight_session_id,
                                                 dcu_id,
                                                 lcu_id_list,
                                                 lcu_mode,
                                                 lcu_ison,
                                                 lcu_level))
            {
                /** Get information of DCU if LCUs again **/
                smartstreetlight_get_lcu_list_execute(smartstreetlight_username, smartstreetlight_session_id, dcu_id);
            }
            break;
        case DIALOG_CANCEL_RESPONSE:
            break;
        default:
            break;
    }

    gtk_widget_hide(main_widgets->lcu_control_dialog);
    gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), TRUE);

    g_string_free(lcu_id_list, TRUE);
    g_free(dcu_id);
    return TRUE;


#else
    DEBUG_1();

    GtkTreeIter      iter;
    GtkTreeModel     *model;
    GtkTreeSelection *selection;

    selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(lcu_info_tree_view));

    if (selection && gtk_tree_selection_count_selected_rows(selection)  == 1)
    {
        if(gtk_tree_selection_get_selected(selection, &model, &iter))
        {

            GtkWidget *lcu_control_label_id = GTK_WIDGET(SPL_OBJECT("lcu_control_label_id"));
            GtkWidget *lcu_control_combobox_mode = GTK_WIDGET(SPL_OBJECT("lcu_control_combobox_mode"));
            GtkWidget *lcu_control_switch_on_off = GTK_WIDGET(SPL_OBJECT("lcu_control_switch_on_off"));
            GtkWidget *lcu_control_scale_level = GTK_WIDGET(SPL_OBJECT("lcu_control_scale_level"));

            GtkWidget *lcu_control_label_program_name = GTK_WIDGET(SPL_OBJECT("lcu_control_label_program_name"));


            gchar *dcu_id;
            gchar *lcu_id;
            gchar *lcu_mode;
            gboolean lcu_ison;
            gchar *lcu_level;


            gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, LCU_ID_COLUMN, &lcu_id,
                                                             LCU_MODE_COLUMN, &lcu_mode,
                                                             LCU_ISON_COLUMN, &lcu_ison,
                                                             LCU_LIGHTLEVEL_COLUMN, &lcu_level,
                                                             LCU_DCUID_COLUMN, &dcu_id,
                                                             -1);
            if(lcu_id!=NULL)
            {
                gtk_label_set_text(GTK_LABEL(lcu_control_label_id), lcu_id);
                gtk_switch_set_active(GTK_SWITCH(lcu_control_switch_on_off), lcu_ison);

                if(lcu_mode!=NULL)
                {
                    if (g_strcmp0(lcu_mode, SPL_LCU_MANUAL_MODE)==0)
                    {
                        gtk_combo_box_set_active(GTK_COMBO_BOX(lcu_control_combobox_mode),
                                                 (gint)SPL_LCU_ManualMode);
                    }
                    else if (g_strcmp0(lcu_mode, SPL_LCU_SCHEDULE_MODE)==0)
                    {
                        gtk_combo_box_set_active(GTK_COMBO_BOX(lcu_control_combobox_mode),
                                                 (gint)SPL_LCU_ScheduleMode);
                    }
                    else
                    {
                        gtk_combo_box_set_active(GTK_COMBO_BOX(lcu_control_combobox_mode), -1);
                    }
                }
                if(lcu_level!=NULL)
                {
                    gtk_adjustment_set_value(GTK_ADJUSTMENT(lcu_widgets->lcu_adjustment_light_level),
                                             (gdouble)g_ascii_strtoll(lcu_level, NULL, 0));
                }
                else
                {
                    gtk_adjustment_set_value(GTK_ADJUSTMENT(lcu_widgets->lcu_adjustment_light_level), 0);
                }
                if(lcu_ison)
                {
                    gtk_widget_set_sensitive(GTK_WIDGET(lcu_widgets->lcu_scale_light_level), TRUE);
                }
                else
                {
                    gtk_widget_set_sensitive(GTK_WIDGET(lcu_widgets->lcu_scale_light_level), FALSE);
                }

//                smartstreetlight_get_schedule_list_execute(smartstreetlight_username,
//                                                           smartstreetlight_session_id,
//                                                           gtk_label_get_text(GTK_LABEL(lcu_control_label_program_name)),
//                                                           LISTSTORE_PROGRAM_LCU_CONTROL);
            }
            else
            {
                /** [NEED]  Show thong bao loi o day !!!**/
                return FALSE;
            }

            gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), FALSE);
            gint response_id = gtk_dialog_run(GTK_DIALOG(main_widgets->lcu_control_dialog));

            switch(response_id)
            {

                case DIALOG_OK_RESPONSE:
                    lcu_level = (gint)gtk_adjustment_get_value(GTK_ADJUSTMENT(lcu_widgets->lcu_adjustment_light_level));

                    smartstreetlight_lcu_control_execute(smartstreetlight_username,
                                                         smartstreetlight_session_id,
                                                         dcu_id,
                                                         lcu_id,
                                                         lcu_ison,
                                                         lcu_level);
                    break;
                case DIALOG_CANCEL_RESPONSE:
                    break;
                default:
                    break;
            }

            gtk_widget_hide(main_widgets->lcu_control_dialog);
            gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), TRUE);
        }
    }
#endif // 0
}


static void smartstreetlight_lcu_popup_menu_remove_clicked(void)
{
    DEBUG_1();
    DEBUG("===== ENTER REMOVE LCU =====");
    GtkTreeIter      iter;
    GtkTreeModel     *model;
    GtkTreeSelection *selection;

    selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(lcu_info_tree_view));

    if (gtk_tree_selection_count_selected_rows(selection)  == 1)
    {
        if(gtk_tree_selection_get_selected(selection, &model, &iter))
        {
            gchar *lcu_id;
            gchar *lcu_dcuid;
            gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, LCU_ID_COLUMN, &lcu_id,
                                                             LCU_DCUID_COLUMN, &lcu_dcuid,
                                                             -1);

            DEBUG("\n REMOVE DCU with lcu_id: %s\n\n", lcu_id);

            gtk_label_set_text(GTK_LABEL(SPL_OBJECT("delete_dialog_label")), "Xóa LCU với mã sau:");

            gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (smartstreetlight_builder, "delete_element_id")), lcu_id);

            gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), FALSE);
            gint response_id = gtk_dialog_run((GtkDialog *)main_widgets->delete_element_dialog);

            switch(response_id)
            {
                case DIALOG_OK_RESPONSE:
                    if(smartstreetlight_lcu_remove_execute(smartstreetlight_username,
                                                           smartstreetlight_session_id,
                                                           lcu_id,
                                                           lcu_dcuid))
                    {
                        gtk_list_store_remove(GTK_LIST_STORE(model), &iter);
                    }
                    break;
                case DIALOG_CANCEL_RESPONSE:

                    break;
                default:
                    break;
            }
            gtk_widget_hide(main_widgets->delete_element_dialog);
            gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), TRUE);
            g_free(lcu_id);
        }
    }
}

static void smartstreetlight_lcu_popup_menu_remove_all_clicked(void)
{
    DEBUG_1();
    DEBUG("===== ENTER REMOVE ALL LCU =====");
}




static void smartstreetlight_lcu_popup_menu_clicked(GtkWidget *popup_menu_item, gpointer userdata)
{
    SPL_LCU_POPUP_MENU_Enum type = (SPL_LCU_POPUP_MENU_Enum)GPOINTER_TO_INT(userdata);
    switch(type)
    {
    case SPL_LCU_M_ADD:
        gboolean add_result;
        do
        {
            add_result = smartstreetlight_lcu_popup_menu_add_clicked();
        }
        while(!add_result);
        break;
    case SPL_LCU_M_CONTROL:
        smartstreetlight_lcu_popup_menu_control_clicked();
        break;
    case SPL_LCU_M_REMOVE:
        smartstreetlight_lcu_popup_menu_remove_clicked();
        break;
    case SPL_LCU_M_REMOVE_ALL:
        smartstreetlight_lcu_popup_menu_remove_all_clicked();
        break;
    default:
        break;
    }
}


static void smartstreetlight_lcu_popup_menu_widget_init(void)
{
    GtkWidget *separator_item;
    lcu_info_popup_menu->M_Popup = gtk_menu_new();
    SPL_MENU_CSS(lcu_info_popup_menu->M_Popup);

    lcu_info_popup_menu->M_Add = gtk_menu_item_new_with_label("Thêm mới");
    gtk_menu_shell_append(GTK_MENU_SHELL(lcu_info_popup_menu->M_Popup),lcu_info_popup_menu->M_Add);

    separator_item = gtk_separator_menu_item_new();
    gtk_menu_shell_append(GTK_MENU_SHELL(lcu_info_popup_menu->M_Popup), separator_item);

    lcu_info_popup_menu->M_Control = gtk_menu_item_new_with_label("Điều khiển");
    gtk_menu_shell_append(GTK_MENU_SHELL(lcu_info_popup_menu->M_Popup),lcu_info_popup_menu->M_Control);

    separator_item = gtk_separator_menu_item_new();
    gtk_menu_shell_append(GTK_MENU_SHELL(lcu_info_popup_menu->M_Popup), separator_item);

    lcu_info_popup_menu->M_Remove= gtk_menu_item_new_with_label("Xóa");
    gtk_menu_shell_append(GTK_MENU_SHELL(lcu_info_popup_menu->M_Popup),lcu_info_popup_menu->M_Remove);

    lcu_info_popup_menu->M_Remove_all = gtk_menu_item_new_with_label("Xóa tất cả");
    gtk_menu_shell_append(GTK_MENU_SHELL(lcu_info_popup_menu->M_Popup),lcu_info_popup_menu->M_Remove_all);
}

static void smartstreetlight_lcu_popup_menu_callback_init(void)
{
    g_signal_connect(lcu_info_popup_menu->M_Add, "activate",
                     (GCallback) smartstreetlight_lcu_popup_menu_clicked, GINT_TO_POINTER(SPL_LCU_M_ADD));

    g_signal_connect(lcu_info_popup_menu->M_Control, "activate",
                     (GCallback) smartstreetlight_lcu_popup_menu_clicked, GINT_TO_POINTER(SPL_LCU_M_CONTROL));

    g_signal_connect(lcu_info_popup_menu->M_Remove, "activate",
                     (GCallback) smartstreetlight_lcu_popup_menu_clicked, GINT_TO_POINTER(SPL_LCU_M_REMOVE));

    g_signal_connect(lcu_info_popup_menu->M_Remove_all, "activate",
                     (GCallback) smartstreetlight_lcu_popup_menu_clicked, GINT_TO_POINTER(SPL_LCU_M_REMOVE_ALL));
}


static gboolean smartstreetlight_lcu_popup_menu_init(void)
{
    lcu_info_popup_menu = g_new0(struct SPL_LCU_POPUP_MENU, 1);

    smartstreetlight_lcu_popup_menu_widget_init();
    smartstreetlight_lcu_popup_menu_callback_init();

    return TRUE;
}

static void smartstreetlight_lcu_dialog_setup_dcu_combobox(gchar *dcu_id)
{
//    MYSQL_RES *result;
//    gchar *command;
//    gint index;
//    gint count;
//
//    command = g_strdup_printf("SELECT %s FROM %s", STL_DCUTABLE.DCUID, STL_DATABASE.DCUTABLE);
//
//    DEBUG("\n=======> [COMMAND] :%s", command);
//
//    if(smartstreetlight_sql_query(command, &result))
//    {
//        MYSQL_ROW row;
//        smartstreetlight_clear_list_store(GTK_TREE_MODEL(lcu_info_list_dcu_combobox));
//
//        count=0;
//        while ((row = mysql_fetch_row(result)))
//        {
//            if(g_ascii_strcasecmp(row[0], dcu_id)==0)
//            {
//                index=count;
//            }
//            smartstreetlight_lcu_dcu_list_combobox_fill(row[0]);
//            count++;
//        }
//        mysql_free_result(result);
//    }
//    g_free(command);
//
//    gtk_combo_box_set_active(GTK_COMBO_BOX(gtk_builder_get_object (smartstreetlight_builder, "lcu_info_dcuid_combobox")), index);

}

void smartstreetlight_lcu_show_list(gchar *dcu_id)
{
    smartstreetlight_get_lcu_list_execute(smartstreetlight_username, smartstreetlight_session_id, dcu_id);
}



void smartstreetlight_lcu_dcu_list_combobox_fill(gchar *dcu_name)
{
    GtkTreeIter iter;
    gtk_list_store_append(lcu_info_list_dcu_combobox, &iter);
    gtk_list_store_set(lcu_info_list_dcu_combobox, &iter, 0, dcu_name, -1);
}

void smartstreetlight_lcu_fill_infomation(gchar *lcu_name,
                                           gchar *lcu_gps,
                                           gchar *lcu_note,
                                           gchar *lcu_mode,
                                           gboolean lcu_ison,
                                           gboolean lcu_status,
                                           gchar *lcu_current,
                                           gchar *lcu_lightlevel,
                                           gboolean lcu_isbroken,
                                           gchar *lcu_dcuid,
                                           gchar *lcu_updatetime
                                           )
{
    GtkTreeIter iter;
    gtk_list_store_append(lcu_info_list_store, &iter);
    gtk_list_store_set(lcu_info_list_store, &iter, LCU_CHECKBOX_COLUMN,     FALSE,
                                                   LCU_ID_COLUMN,           lcu_name,
                                                   LCU_GPS_COLUMN,          lcu_gps,
                                                   LCU_NOTE_COLUMN,         lcu_note,
                                                   LCU_MODE_COLUMN,         lcu_mode,
                                                   LCU_ISON_COLUMN,         lcu_ison,
                                                   LCU_STATUS_COLUMN,       lcu_status,
                                                   LCU_CURRENT_COLUMN,      lcu_current,
                                                   LCU_LIGHTLEVEL_COLUMN,   lcu_lightlevel,
                                                   LCU_ISBROKEN_COLUMN,     lcu_isbroken,
                                                   LCU_DCUID_COLUMN,        lcu_dcuid,
                                                   LCU_UPDATETIME_COLUMN,   lcu_updatetime,
                                                   -1);
}

static gboolean smartstreetlight_lcu_dialog_init()
{
//    GtkDialog *lcu_info_dialog = GTK_TREE_VIEW(gtk_builder_get_object (smartstreetlight_builder, "lcu_info_dialog"));
//    gtk_widget_set_parent_window(GTK_WIDGET(lcu_info_dialog), GTK_WINDOW())
    return TRUE;
}

static gboolean smartstreetlight_lcu_callback_init()
{
    g_signal_connect(GTK_TREE_VIEW(lcu_info_tree_view),
                     "button-press-event",
                     G_CALLBACK(on_smartstreetlight_lcu_specical_clicked), NULL);

    return TRUE;
}

static gboolean smartstreetlight_lcu_list_store_init(void)
{
    lcu_info_list_store = gtk_list_store_new(LCU_NUM_COLUMNS,
                                            G_TYPE_BOOLEAN,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_BOOLEAN,
                                            G_TYPE_BOOLEAN,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_BOOLEAN,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING);

    gtk_tree_view_set_model(GTK_TREE_VIEW(lcu_info_tree_view), GTK_TREE_MODEL(lcu_info_list_store));
    g_object_unref(lcu_info_list_store);



    /* Init store for combobox dcu_list */
//    lcu_info_list_dcu_combobox = gtk_list_store_new(1, G_TYPE_STRING);
//    gtk_combo_box_set_model(GTK_COMBO_BOX(gtk_builder_get_object (smartstreetlight_builder, "lcu_info_dcuid_combobox")),
//                            GTK_TREE_MODEL(lcu_info_list_dcu_combobox));
//    g_object_unref(lcu_info_list_dcu_combobox);

    /** Init for List Store of LCU control - part: schedule information follow mode of LCU**/
    lcu_widgets->lcu_control_liststore_schedule = gtk_list_store_new(LCU_SCHEDULE_NUM_COLUMNS,
                                                                     G_TYPE_STRING,
                                                                     G_TYPE_STRING,
                                                                     G_TYPE_STRING,
                                                                     G_TYPE_STRING,
                                                                     G_TYPE_STRING);
    gtk_tree_view_set_model(GTK_TREE_VIEW(lcu_widgets->lcu_control_treeview_schedule),
                            GTK_TREE_MODEL(lcu_widgets->lcu_control_liststore_schedule));
    g_object_unref(lcu_widgets->lcu_control_liststore_schedule);

    return TRUE;
}

static gboolean smartstreetlight_lcu_tree_view_init(void)
{
    GtkTreeViewColumn   *lcu_list_column;
    GtkCellRenderer     *lcu_list_renderer;

    lcu_info_tree_view = GTK_TREE_VIEW(gtk_builder_get_object (smartstreetlight_builder, "lcu_info_tree_view"));

    lcu_list_renderer = gtk_cell_renderer_toggle_new();
    lcu_list_column = gtk_tree_view_column_new_with_attributes ("", lcu_list_renderer, "active", LCU_CHECKBOX_COLUMN, NULL);
    gtk_tree_view_append_column (GTK_TREE_VIEW(lcu_info_tree_view), lcu_list_column);

    lcu_list_renderer = gtk_cell_renderer_text_new();
    lcu_list_column = gtk_tree_view_column_new_with_attributes("Mã:", lcu_list_renderer, "text", LCU_ID_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(lcu_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(lcu_list_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(lcu_info_tree_view), lcu_list_column);

    lcu_list_renderer = gtk_cell_renderer_text_new();
    lcu_list_column = gtk_tree_view_column_new_with_attributes("Tọa Độ GPS:", lcu_list_renderer, "text", LCU_GPS_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(lcu_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(lcu_list_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(lcu_info_tree_view), lcu_list_column);

    lcu_list_renderer = gtk_cell_renderer_text_new();
    lcu_list_column = gtk_tree_view_column_new_with_attributes("Ghi Chú:", lcu_list_renderer, "text", LCU_NOTE_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(lcu_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(lcu_list_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(lcu_info_tree_view), lcu_list_column);

    lcu_list_renderer = gtk_cell_renderer_text_new();
    lcu_list_column = gtk_tree_view_column_new_with_attributes("Mode Hoạt Động:", lcu_list_renderer, "text", LCU_MODE_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(lcu_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(lcu_list_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(lcu_info_tree_view), lcu_list_column);

    lcu_list_renderer = gtk_cell_renderer_toggle_new();
    lcu_list_column = gtk_tree_view_column_new_with_attributes("Online:", lcu_list_renderer, "active", LCU_ISON_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(lcu_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(lcu_list_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(lcu_info_tree_view), lcu_list_column);

    lcu_list_renderer = gtk_cell_renderer_toggle_new();
    lcu_list_column = gtk_tree_view_column_new_with_attributes("Trạng Thái:", lcu_list_renderer, "active", LCU_STATUS_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(lcu_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(lcu_list_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(lcu_info_tree_view), lcu_list_column);

    lcu_list_renderer = gtk_cell_renderer_text_new();
    lcu_list_column = gtk_tree_view_column_new_with_attributes("Dòng Hiện Tại:", lcu_list_renderer, "text", LCU_CURRENT_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(lcu_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(lcu_list_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(lcu_info_tree_view), lcu_list_column);

    lcu_list_renderer = gtk_cell_renderer_text_new();
    lcu_list_column = gtk_tree_view_column_new_with_attributes("CẤp Độ Sáng:", lcu_list_renderer, "text", LCU_LIGHTLEVEL_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(lcu_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(lcu_list_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(lcu_info_tree_view), lcu_list_column);

    lcu_list_renderer = gtk_cell_renderer_toggle_new();
    lcu_list_column = gtk_tree_view_column_new_with_attributes("Sự Cố:", lcu_list_renderer, "active", LCU_ISBROKEN_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(lcu_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(lcu_list_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(lcu_info_tree_view), lcu_list_column);

    gtk_tree_selection_set_mode (gtk_tree_view_get_selection (GTK_TREE_VIEW (lcu_info_tree_view)),
                                 GTK_SELECTION_MULTIPLE);


//    lcu_list_renderer = gtk_cell_renderer_text_new();
//    lcu_list_column = gtk_tree_view_column_new_with_attributes("Mã DCU Quản Lý:", lcu_list_renderer, "text", LCU_DCUID_COLUMN, NULL);
//    gtk_tree_view_column_set_resizable(lcu_list_column,TRUE);
//    gtk_tree_view_column_set_reorderable(lcu_list_column, TRUE);
//    gtk_tree_view_append_column(GTK_TREE_VIEW(lcu_info_tree_view), lcu_list_column);


    lcu_list_renderer = gtk_cell_renderer_text_new();
    lcu_list_column = gtk_tree_view_column_new_with_attributes("Ngày Cập Nhật:", lcu_list_renderer, "text", LCU_UPDATETIME_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(lcu_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(lcu_list_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(lcu_info_tree_view), lcu_list_column);

//    gtk_tree_view_set_enable_search(GTK_TREE_VIEW(lcu_info_tree_view), TRUE);
//    gtk_tree_view_set_search_column(GTK_TREE_VIEW(lcu_info_tree_view), LCU_ID_COLUMN);
//    gtk_tree_view_set_search_entry(GTK_TREE_VIEW(lcu_info_tree_view),
//                                   GTK_ENTRY(gtk_builder_get_object (smartstreetlight_builder, "lcu_list_search_entry")));


    /** Init for Tree View of LCU control - part: schedule information follow mode of LCU**/

    GtkTreeViewColumn   *schedule_list_column;
    GtkCellRenderer     *schedule_list_renderer;

    schedule_list_renderer = gtk_cell_renderer_text_new();
    schedule_list_column = gtk_tree_view_column_new_with_attributes ("Tháng:", schedule_list_renderer, "text", LCU_SCHEDULE_MONTH_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(schedule_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(schedule_list_column, TRUE);
    gtk_tree_view_append_column (GTK_TREE_VIEW(lcu_widgets->lcu_control_treeview_schedule), schedule_list_column);

    schedule_list_renderer = gtk_cell_renderer_text_new();
    schedule_list_column = gtk_tree_view_column_new_with_attributes ("Start Time:", schedule_list_renderer, "text", LCU_SCHEDULE_STARTTIME_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(schedule_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(schedule_list_column, TRUE);
    gtk_tree_view_append_column (GTK_TREE_VIEW(lcu_widgets->lcu_control_treeview_schedule), schedule_list_column);

    schedule_list_renderer = gtk_cell_renderer_text_new();
    schedule_list_column = gtk_tree_view_column_new_with_attributes ("Time On:", schedule_list_renderer, "text", LCU_SCHEDULE_TIMEON_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(schedule_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(schedule_list_column, TRUE);
    gtk_tree_view_append_column (GTK_TREE_VIEW(lcu_widgets->lcu_control_treeview_schedule), schedule_list_column);

    schedule_list_renderer = gtk_cell_renderer_text_new();
    schedule_list_column = gtk_tree_view_column_new_with_attributes ("Level Light:", schedule_list_renderer, "text", LCU_SCHEDULE_LEVEL_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(schedule_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(schedule_list_column, TRUE);
    gtk_tree_view_append_column (GTK_TREE_VIEW(lcu_widgets->lcu_control_treeview_schedule), schedule_list_column);

//    schedule_list_renderer = gtk_cell_renderer_text_new();
//    schedule_list_column = gtk_tree_view_column_new_with_attributes ("Program Name:", schedule_list_renderer, "text", SCHEDULE_PROGRAM_NAME_COLUMN, NULL);
//    gtk_tree_view_column_set_resizable(schedule_list_column,TRUE);
//    gtk_tree_view_column_set_reorderable(schedule_list_column, TRUE);
//    gtk_tree_view_append_column (GTK_TREE_VIEW(lcu_widgets->lcu_control_treeview_schedule), schedule_list_column);

    return TRUE;
}


gboolean smartstreetlight_lcu_info_init(void)
{
    DEBUG_1();
    lcu_widgets = g_slice_new(SPL_LCU_Widgets);

    lcu_widgets->lcu_control_treeview_schedule = GTK_TREE_VIEW(SPL_OBJECT("lcu_control_treeview_schedule"));

    lcu_widgets->lcu_adjustment_light_level = gtk_adjustment_new(0, 0, 30, 1, 0, 0);
    DEBUG_1();
    lcu_widgets->lcu_scale_light_level = gtk_scale_new(GTK_ORIENTATION_HORIZONTAL, GTK_ADJUSTMENT(lcu_widgets->lcu_adjustment_light_level));
    DEBUG_1();

    gtk_scale_set_digits(GTK_SCALE(lcu_widgets->lcu_scale_light_level), 0);
    DEBUG_1();
    gtk_container_add(GTK_CONTAINER(SPL_OBJECT("lcu_control_scale_box_lightlevel")), lcu_widgets->lcu_scale_light_level);
    DEBUG_1();
    gtk_widget_set_hexpand(GTK_WIDGET(lcu_widgets->lcu_scale_light_level), TRUE);
    DEBUG_1();
    gtk_widget_set_visible(GTK_WIDGET(lcu_widgets->lcu_scale_light_level), TRUE);
    DEBUG_1();

    smartstreetlight_view_init();

    /*

    if(smartstreetlight_lcu_tree_view_init())
    {
        if (smartstreetlight_lcu_list_store_init())
        {
            if(smartstreetlight_lcu_callback_init())
            {
                if(smartstreetlight_lcu_popup_menu_init())
                {
                    return TRUE;
                }
            }
        }
    }*/
    return TRUE;
}

void smartstreetlight_lcu_finalize(void)
{
    g_slice_free(SPL_LCU_Widgets, lcu_widgets);

    if(lcu_info_tree_view)
        gtk_widget_destroy(GTK_WIDGET(lcu_info_tree_view));
    if(lcu_info_list_store)
        gtk_widget_destroy(GTK_WIDGET(lcu_info_list_store));
    if(lcu_info_list_dcu_combobox)
        gtk_widget_destroy(GTK_WIDGET(lcu_info_list_dcu_combobox));
}

void smartstreetlight_lcu_dialog_show(GtkTreeModel *model, GtkTreeIter iter)
{
    gchar *lcu_id = NULL;
    gchar *lcu_dcuid = NULL;
    gboolean lcu_status;
    gchar *lcu_starttime = NULL;
    gchar *lcu_lightlevel = NULL;
    gchar *lcu_mode = NULL;
    gboolean lcu_isbroken;

//    gtk_tree_model_get(GTK_TREE_MODEL(model), &iter,
//                       LCU_ID_COLUMN, &lcu_id,
//                       LCU_STATUS_COLUMN, &lcu_status,
//                       LCU_STARTTIME_COLUMN, &lcu_starttime,
//                       LCU_LIGHTLEVEL_COLUMN, &lcu_lightlevel,
//                       LCU_ISBROKEN_COLUMN, &lcu_isbroken,
//                       LCU_MODE_COLUMN,     &lcu_mode,
//                       LCU_DCUID_COLUMN, &lcu_dcuid,
//                       -1);

//    DEBUG("\nlcu_id: %s", lcu_id);
//    DEBUG("\nlcu_starttime: %s", lcu_starttime);
//    DEBUG("\nlcu_dcuid: %s", lcu_dcuid);
//    DEBUG("lcu_status: %d", lcu_status);

    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (smartstreetlight_builder, "lcu_info_lcuid_text")), lcu_id);

    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (smartstreetlight_builder, "lcu_info_starttime_text")), lcu_starttime);

    gtk_entry_set_text(GTK_ENTRY(gtk_builder_get_object (smartstreetlight_builder, "lcu_info_level_entry")), lcu_lightlevel);

    gtk_switch_set_active(GTK_SWITCH(gtk_builder_get_object (smartstreetlight_builder, "lcu_info_status_switch")), lcu_status);

    gtk_combo_box_set_active(GTK_COMBO_BOX(gtk_builder_get_object(smartstreetlight_builder, "lcu_info_mode_combobox")), atoi(lcu_mode));


    if(!lcu_isbroken)
    {
        gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (smartstreetlight_builder, "lcu_info_broken_text")), "");
    }
    else
    {
        gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (smartstreetlight_builder, "lcu_info_broken_text")), "YES");
    }

    smartstreetlight_lcu_dialog_setup_dcu_combobox(lcu_dcuid);

    gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), FALSE);


    gint response_id = gtk_dialog_run((GtkDialog *)main_widgets->lcu_info_dialog);

    switch(response_id)
    {
        case DIALOG_OK_RESPONSE:
            gtk_widget_hide(main_widgets->lcu_info_dialog);
            gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), TRUE);
            break;

        case DIALOG_CANCEL_RESPONSE:
        default:
            gtk_widget_hide(main_widgets->lcu_info_dialog);
            gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), TRUE);
            break;
	}
}

void smartstreetlight_lcu_liststore_clean()
{
    smartstreetlight_clear_list_store(GTK_TREE_MODEL(lcu_info_list_store));
}

void smartstreetlight_lcu_popup_menu_show(GtkTreeView *treeview, GdkEventButton *event, gpointer userdata)
{
    gtk_widget_show_all(GTK_WIDGET(lcu_info_popup_menu->M_Popup));
    gtk_menu_popup(GTK_MENU(lcu_info_popup_menu->M_Popup), NULL, NULL, NULL, NULL,
                   (event != NULL) ? event->button : 0, gdk_event_get_time((GdkEvent*)event));
}



gchar * smartstreetlight_lcu_get_mode_name(SPL_LCU_MODE_Enum index)
{
    switch(index)
    {
    case SPL_LCU_ScheduleMode:
        return g_strdup(SPL_LCU_SCHEDULE_MODE);
    case SPL_LCU_ManualMode:
        return g_strdup(SPL_LCU_MANUAL_MODE);
    default:
        return g_strdup(SPL_LCU_UNKNOWN_MODE);
    }
}

gchar * smartstreetlight_lcu_get_status_name(SPL_LCU_STATUS_Enum index)
{
    switch(index)
    {
    case SPL_LCU_Active:
        return g_strdup(SPL_STATUS_ACTIVE);
    case SPL_LCU_Unactive:
        return g_strdup(SPL_STATUS_INACTIVE);
    default:
        return NULL;
    }
}


void smartstreetlight_lcu_control_mode_combobox_change(void)
{
    GtkWidget *lcu_control_combobox_mode = GTK_WIDGET(SPL_OBJECT("lcu_control_combobox_mode"));
    GtkWidget *lcu_control_manual_mode_frame = GTK_WIDGET(SPL_OBJECT("lcu_control_manual_mode_frame"));
    GtkWidget *lcu_control_schedule_mode_frame = GTK_WIDGET(SPL_OBJECT("lcu_control_schedule_mode_frame"));

    switch(gtk_combo_box_get_active(GTK_COMBO_BOX(lcu_control_combobox_mode)))
    {
    case SPL_LCU_ManualMode:
        gtk_widget_set_visible(GTK_WIDGET(lcu_control_manual_mode_frame), TRUE);
        gtk_widget_set_visible(GTK_WIDGET(lcu_control_schedule_mode_frame), FALSE);
        gtk_widget_set_sensitive(GTK_WIDGET(SPL_OBJECT("lcu_control_ok")), TRUE);
        break;
    case SPL_LCU_ScheduleMode:
        gtk_widget_set_visible(GTK_WIDGET(lcu_control_manual_mode_frame), FALSE);
        gtk_widget_set_visible(GTK_WIDGET(lcu_control_schedule_mode_frame), TRUE);
        gtk_widget_set_sensitive(GTK_WIDGET(SPL_OBJECT("lcu_control_ok")), FALSE);
        break;
    default:
        gtk_widget_set_visible(GTK_WIDGET(lcu_control_manual_mode_frame), FALSE);
        gtk_widget_set_visible(GTK_WIDGET(lcu_control_schedule_mode_frame), FALSE);
        break;
    }
}


void smartstreetlight_lcu_control_schedule_fill(gchar *schedule_month,
                                                gchar *schedule_starttime,
                                                gchar *schedule_timeon,
                                                gchar *schedule_level,
                                                gchar *schedule_program_name)
{
    GtkTreeIter iter;
    gtk_list_store_append(lcu_widgets->lcu_control_liststore_schedule, &iter);
    gtk_list_store_set(lcu_widgets->lcu_control_liststore_schedule, &iter,
                                                    LCU_SCHEDULE_MONTH_COLUMN, schedule_month,
                                                    LCU_SCHEDULE_STARTTIME_COLUMN, schedule_starttime,
                                                    LCU_SCHEDULE_TIMEON_COLUMN, schedule_timeon,
                                                    LCU_SCHEDULE_LEVEL_COLUMN, schedule_level,
                                                    LCU_SCHEDULE_PROGRAM_NAME_COLUMN, schedule_program_name,
                                                    -1);
}



/**
* Author: M-Hieu
* Begin developing for new interface
* I don't known what above code done and I don't have time to read all of them
*/


GtkListStore *light_store = NULL;
GtkListStore *light_hidden_store = NULL;
GtkTreeSelection *light_selection = NULL;
GtkWidget *lcu_popup_window = NULL;
/**
*Callback functions
*
*
*/

static void popup_light_view_init()
{
    GtkWidget *item;
    if(lcu_popup_window == NULL)
    {
        lcu_popup_window = gtk_menu_new();
        item = gtk_menu_item_new_with_label("Thêm mới");
        gtk_menu_shell_append(GTK_MENU_SHELL(lcu_popup_window), item);
        gtk_widget_show(item);
        item = gtk_menu_item_new_with_label("Chỉnh sửa");
        gtk_menu_shell_append(GTK_MENU_SHELL(lcu_popup_window),  item);
        gtk_widget_show(item);
        item = gtk_menu_item_new_with_label(" Xóa");
        gtk_menu_shell_append(GTK_MENU_SHELL(lcu_popup_window),  item);
        gtk_widget_show(item);
        item = gtk_check_menu_item_new_with_label("Mở/Tắt");
        gtk_menu_shell_append(GTK_MENU_SHELL(lcu_popup_window), item);
    }
}

void popup_light_view_show(GdkEventButton *event)
{
    DEBUG_1();

    gtk_widget_show_all(lcu_popup_window);
    gtk_menu_popup(GTK_MENU(lcu_popup_window), NULL, NULL, NULL, NULL,
                   (event != NULL) ? event->button : 0, gdk_event_get_time((GdkEvent*)event));
}
void light_update_information_from_model_iter(GtkTreeModel *model, GtkTreeIter *iter)
{
    DEBUG_1();
    gchar *id, *status, *gps, *level, *vol, *note;
    gint istatus, ison, imode;
    OsmGpsMapImage *image;

    gtk_tree_model_get(model, iter,
                       LIGHT_ID, &id,
                       LIGHT_AMPE, &vol,
                       LIGHT_GPS, &gps,
                       LIGHT_BRIGHTNESS, &level,
                       LIGHT_ISON, &ison,
                       LIGHT_NOTE, &note,
                       LIGHT_STATUS, &istatus,
                       LIGHT_ISON, &ison,
                       LIGHT_MODE, &imode,
                       LIGHT_IMG, &image,
                       -1 );
    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (smartstreetlight_builder, "lb_lcu_id")), id);
    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (smartstreetlight_builder, "lb_lcd_note")), note);
    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (smartstreetlight_builder, "lb_lcd_gps")), gps);
    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (smartstreetlight_builder, "lb_lcd_vol")), vol);
    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (smartstreetlight_builder, "lb_lcd_level")), level);
    DEBUG("Status: %d\n", istatus);
    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (smartstreetlight_builder, "lb_lcd_status")), istatus  == 0 ? "Đang Hoạt Động": "Hư");
    gtk_switch_set_state(GTK_SWITCH(gtk_builder_get_object (smartstreetlight_builder, "switch_light")), (ison != 0));
    gtk_widget_set_sensitive(GTK_WIDGET(gtk_builder_get_object (smartstreetlight_builder, "switch_light")), (istatus == 0));
    if(image)
    {
        const OsmGpsMapPoint *pt = osm_gps_map_image_get_point(image);
        osm_gps_map_set_center(map, rad2deg(pt->rlat), rad2deg(pt->rlon));
        DEBUG("center: %f, %f\n", rad2deg(pt->rlat), rad2deg(pt->rlon));
    }
}
static gboolean on_light_view_click_cb(GtkTreeView *treeview, GdkEventButton *event, gpointer userdata)
{
    DEBUG_1();
    GtkTreeIter iter;
    gint select_rows = gtk_tree_selection_count_selected_rows(light_selection);
    GtkTreeModel *model;
    switch(event->button)
    {
    case 1: //left
        if(event->type == GDK_BUTTON_PRESS)
            return FALSE;
        if(select_rows != 1)
            return TRUE;
        DEBUG("Double click\n");
        if(gtk_tree_selection_get_selected(light_selection, &model, &iter))
        {
            light_update_information_from_model_iter(model, &iter);
        }
        break;
    case 2: //middle
        DEBUG("Middle Button click ...\n");
        break;
    case 3: //right
        DEBUG("Right Button click ...\n");
        /**Select row at where button were clicked on*/
        GtkTreePath *path;
        if (gtk_tree_view_get_path_at_pos(GTK_TREE_VIEW(treeview), (gint) event->x, (gint) event->y, &path, NULL, NULL, NULL))
        {
            gtk_tree_selection_unselect_all(light_selection);
            gtk_tree_selection_select_path(light_selection, path);
            gtk_tree_path_free(path);
        }else
            return TRUE;
        /**Show popup menu for light view*/
        popup_light_view_show(event);
        break;
    default:
        DEBUG("Wrong button click\n");
        break;
    }
    return TRUE;
}

/**
* End callback functions
*/

static void init_store(GtkTreeView *view, GtkListStore *store)
{
    GtkTreeViewColumn   *column;
    GtkCellRenderer     *renderer;
    renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new_with_attributes("", renderer, "text", LIGHT_ID, NULL);
    gtk_tree_view_append_column(view, column);
    gtk_tree_view_set_model(view, GTK_TREE_MODEL(store));

}

static void smartstreetlight_view_init()
{
    GtkWidget* view;
    GtkWidget* hidden_view;
    GtkTreeViewColumn   *column;
    GtkCellRenderer     *renderer;
    gboolean isInitView = FALSE;
    if(!isInitView)
    {
        DEBUG("Init ...\n");
        view = GTK_WIDGET(gtk_builder_get_object (smartstreetlight_builder, "light_info_tree_view"));
        hidden_view = GTK_WIDGET(gtk_builder_get_object (smartstreetlight_builder, "light_hidden_info_tree_view"));
        light_store = gtk_list_store_new(LIGHT_COUNT,
                                     G_TYPE_STRING,
                                     G_TYPE_STRING,
                                     G_TYPE_INT,
                                     G_TYPE_INT,
                                     G_TYPE_STRING,
                                     G_TYPE_INT,
                                     G_TYPE_STRING,
                                     G_TYPE_STRING,
                                     G_TYPE_STRING,
                                     G_TYPE_INT,
                                     G_TYPE_POINTER,
                                     G_TYPE_POINTER);


        light_hidden_store = gtk_list_store_new(LIGHT_COUNT,
                                     G_TYPE_STRING,
                                     G_TYPE_STRING,
                                     G_TYPE_INT,
                                     G_TYPE_INT,
                                     G_TYPE_STRING,
                                     G_TYPE_INT,
                                     G_TYPE_STRING,
                                     G_TYPE_STRING,
                                     G_TYPE_STRING,
                                     G_TYPE_INT,
                                     G_TYPE_POINTER,
                                     G_TYPE_POINTER);
        init_store(GTK_TREE_VIEW(view), light_store);
        init_store(GTK_TREE_VIEW(hidden_view), light_hidden_store);
        light_selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(hidden_view));
        gtk_tree_selection_set_mode(light_selection, GTK_SELECTION_SINGLE);
        g_signal_connect(GTK_TREE_VIEW(hidden_view),
                     "button-press-event",
                     G_CALLBACK(on_light_view_click_cb), NULL);
        isInitView = TRUE;
    }
    popup_light_view_init();
}

static void create_new_light_instances(GString *id, gpointer parent)
{
    struct soap *soap = soap_new();
    gboolean execute_result = FALSE;

    struct _ns1__getLcuListOperation            input_data;
    struct _ns1__getLcuListOperationResponse    output_data;
    struct ns1__CURR_USCORELOGIN_USCOREINFO_USCOREType current_user_info;

    current_user_info.curr_USCOREusername           = g_strdup(smartstreetlight_username);
    current_user_info.curr_USCOREsession_USCOREid   = smartstreetlight_session_id;

    input_data.current_USCORElogin_USCOREinfo = &current_user_info;
    input_data.dcu_USCOREid = g_strdup((const gchar*)id);

    if(soap_call___ns1__getLcuListOperation(soap, smartstreetlight_server_url, "", &input_data, &output_data)==SOAP_OK)
    {
        if(output_data.message_USCOREresult == ns1__MESSAGE_USCORERESULT_USCOREEnum__NON_USCOREERR)
        {
            execute_result = TRUE;
            gint i = 0;
            GtkTreeIter iter;
            for(i; i<output_data.__sizelcu_USCORElist; i++)
            {
                ns1__LCU_USCOREINFO_USCOREType *lcu = output_data.lcu_USCORElist[i];
                gboolean lcu_isbroken;
//                if(lcu->lcu_USCOREisbroken == 0)
                    lcu_isbroken = TRUE;
//                else
//                    lcu_isbroken = FALSE;

                float lat, lon;
                OsmGpsMapImage *im = NULL;
                GdkPixbuf *buf = NULL;
                switch(lcu->lcu_USCOREstatus)
                {
                case 0:
                    buf = g_on_image;
                    break;
                case 1:
                    buf = g_off_image;
                    break;
                default:
                    buf = g_broken_image;
                    break;
                }
                gtk_list_store_append(light_hidden_store, &iter);
                if(sscanf(lcu->lcu_USCOREgps, "%f-%f", &lon, &lat)==2)
                {
                    im = osm_gps_map_image_add (map, lat, lon, buf);
                    if(im)
                    {
                        osm_gps_map_image_set_iter(im, &iter);
                    }
                }
                gtk_list_store_set(light_hidden_store, &iter,
                                   LIGHT_ID, lcu->lcu_USCOREid,
                                   LIGHT_GPS,  lcu->lcu_USCOREgps,
                                   LIGHT_NOTE, lcu->lcu_USCOREnote,
                                   LIGHT_MODE, lcu->lcu_USCOREmode,
                                   LIGHT_STATUS, lcu->lcu_USCOREstatus,
                                   LIGHT_AMPE, g_strdup_printf("%d", lcu->lcu_USCOREcurrent),
                                   LIGHT_BRIGHTNESS, g_strdup_printf("%d", lcu->lcu_USCORElevel),
                                   LIGHT_ISON, lcu->lcu_USCOREison,
                                   LIGHT_DCU, parent,
                                   LIGHT_IMG, im,
                                   -1);
            }
        }
    }
    else
    {
        soap_print_fault(soap, stderr);
    }
    g_free(current_user_info.curr_USCOREusername);
    g_free( input_data.dcu_USCOREid);
    soap_free(soap);

}

static void smartstreetlight_dcu_foreach(GtkTreeModel *model, GtkTreeIter *parent)
{
    GtkTreeIter iter;
    if(gtk_tree_model_iter_children(model, &iter, parent))
    {
        do
        {
            if(!gtk_tree_model_iter_has_child(model, &iter))
            {
                GString *dcu_id;
                gtk_tree_model_get(model, &iter, DCU_ZONE_NAME_COLUMN, &dcu_id, -1);
                if(dcu_id)
                {
                    create_new_light_instances(dcu_id, &iter);
                }
            }
        }while(gtk_tree_model_iter_next(model, &iter));
    }

}
void smartstreetlight_get_all_light()
{
    GtkTreeView *view = GTK_TREE_VIEW(gtk_builder_get_object (smartstreetlight_builder, "dcu_info_tree_view"));
    GtkTreeModel *model = gtk_tree_view_get_model(view);
    GtkTreeIter diter;
    GtkTreeIter iter;
    gtk_list_store_clear(GTK_LIST_STORE(light_hidden_store));
    gtk_list_store_clear(GTK_LIST_STORE(light_store));
    if(gtk_tree_model_get_iter_first(model, &diter))
    {
        do{
            if(gtk_tree_model_iter_has_child(model, &diter))
            {
                smartstreetlight_dcu_foreach(model, &diter);
            }
        }while(gtk_tree_model_iter_next(model, &diter));
    }

}





