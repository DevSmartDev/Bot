#include "bot_dcu.h"
#include "bot_soap.h"
#include "bot_lcu.h"
#include "bot_line.h"
#include "bot_schedule.h"
#include "bot_error.h"

GtkTreeView *dcu_info_tree_view = NULL;

GtkListStore *dcu_info_list_store = NULL;

struct bot_DCU_Widgets *dcu_widgets = NULL;

struct bot_DCU_POPUP_MENU *dcu_info_popup_menu = NULL;

static void bot_dcu_fill(gchar *dcu_name, gchar *dcu_phone, gchar *dcu_schedule);

static void bot_dcu_specific_gui_update(bot_DCU_MODE_Enum mode);

static gboolean bot_dcu_popup_menu_init(void);

static void bot_dcu_popup_menu_widget_init(void);

static void bot_dcu_popup_menu_callback_init(void);

static void bot_dcu_popup_menu_clicked(GtkWidget *popup_menu_item, gpointer userdata);

static gboolean bot_dcu_popup_menu_add_clicked(void);

static void bot_dcu_popup_menu_edit_clicked(void);

static void bot_dcu_popup_menu_log_clicked(void);

static void bot_dcu_popup_menu_schedule_clicked(void);

static void bot_dcu_popup_menu_remove_clicked(void);

static void bot_dcu_popup_menu_remove_all_clicked(void);

static gboolean bot_dcu_update_info(GtkTreeIter *iter,
                                                 gchar *dcu_id,
                                                 gchar *dcu_phone,
                                                 gchar *dcu_gps,
                                                 gchar *dcu_mode,
                                                 gchar *dcu_address,
                                                 gchar *dcu_note);

static void bot_dcu_clean_specific_area(gchar *current_dcu_id);

static gboolean bot_dcu_tree_view_init(void);
static void bot_dcu_tree_view_init_dcu_list(void);
static void bot_dcu_tree_view_init_connect_log(void);
static void bot_dcu_tree_view_init_dcu_log(void);
static void bot_dcu_tree_view_init_lcu_log(void);
static void bot_dcu_tree_view_init_line_log(void);


static gboolean bot_dcu_list_store_init(void);
static void bot_dcu_list_store_init_dcu_list(void);
static void bot_dcu_list_store_init_connect_log(void);
static void bot_dcu_list_store_init_dcu_log(void);
static void bot_dcu_list_store_init_lcu_log(void);
static void bot_dcu_list_store_init_line_log(void);

static gboolean bot_dcu_tree_store_init(void);
static void bot_dcu_tree_store_init_zone_dcu_info(void);

static void bot_dcu_log_connect_show(void);


/** *********************************************************************************************** **/






void bot_dcu_finalize(void)
{
    g_slice_free(bot_DCU_Widgets, dcu_widgets);

    if(dcu_info_tree_view)
        gtk_widget_destroy(GTK_WIDGET(dcu_info_tree_view));
    if(dcu_info_list_store)
        gtk_widget_destroy(GTK_WIDGET(dcu_info_list_store));
}

static void bot_dcu_clean_specific_area(gchar *current_dcu_id)
{
    DEBUG_1();

    if(g_strcmp0(current_dcu_id, gtk_label_get_text(GTK_LABEL(bot_OBJECT("dcu_info_id"))))==0)
    {
        bot_hide_button_combobox();

        gtk_widget_set_visible(GTK_WIDGET(bot_OBJECT("dcu_program_edit_btn")), FALSE);

        gtk_combo_box_set_active(GTK_COMBO_BOX(bot_OBJECT("dcu_info_mode_combobox")), -1);
        gtk_combo_box_set_active(GTK_COMBO_BOX(bot_OBJECT("dcu_info_program_combobox")), -1);

        gtk_label_set_text(GTK_LABEL(bot_OBJECT("lb_dcu_id")), "");
        gtk_label_set_text(GTK_LABEL(bot_OBJECT("dcu_info_phone")), "");
        gtk_label_set_text(GTK_LABEL(bot_OBJECT("dcu_info_gps")), "");
        gtk_label_set_text(GTK_LABEL(bot_OBJECT("dcu_info_status")), "");
        gtk_label_set_text(GTK_LABEL(bot_OBJECT("dcu_info_note")), "");
        gtk_label_set_text(GTK_LABEL(bot_OBJECT("dcu_info_address")), "");
    }
}

static gboolean bot_dcu_popup_menu_add_clicked(void)
{
    gboolean exit_here = FALSE;

    GtkWidget *add_dcu_label_zone_name = GTK_WIDGET(gtk_builder_get_object (bot_builder, "add_dcu_label_zone_name"));

    GtkWidget *add_dcu_entry_id = GTK_WIDGET(gtk_builder_get_object (bot_builder, "add_dcu_entry_id"));
    GtkWidget *add_dcu_entry_phone = GTK_WIDGET(gtk_builder_get_object (bot_builder, "add_dcu_entry_phone"));
    GtkWidget *add_dcu_entry_gps_x = GTK_WIDGET(gtk_builder_get_object (bot_builder, "add_dcu_entry_gps_x"));
    GtkWidget *add_dcu_entry_gps_y = GTK_WIDGET(gtk_builder_get_object (bot_builder, "add_dcu_entry_gps_y"));
    GtkWidget *add_dcu_combobox_mode = GTK_WIDGET(gtk_builder_get_object (bot_builder, "add_dcu_combobox_mode"));
    GtkWidget *add_dcu_entry_address = GTK_WIDGET(gtk_builder_get_object (bot_builder, "add_dcu_entry_address"));
    GtkWidget *add_dcu_entry_note = GTK_WIDGET(gtk_builder_get_object (bot_builder, "add_dcu_entry_note"));

    GtkWidget *add_dcu_label_error = GTK_WIDGET(gtk_builder_get_object (bot_builder, "add_dcu_label_error"));

    GtkTreeIter      iter;
    GtkTreeIter      parent_iter;
    GtkTreeModel     *model;
    GtkTreeSelection *selection;

    gchar *zone_name;
    gchar *dcu_id;
    gchar *dcu_mode;
    gchar *dcu_gps;
    gint zone_id;

    selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(dcu_info_tree_view));
    if (gtk_tree_selection_count_selected_rows(selection)  == 1)
    {
        if(gtk_tree_selection_get_selected(selection, &model, &iter))
        {
             if(gtk_tree_model_iter_parent(GTK_TREE_MODEL(model), &parent_iter, &iter))
             {
                gtk_tree_model_get(GTK_TREE_MODEL(model), &parent_iter, ZONE_ID_COLUMN, &zone_id,
                                                                        ZONE_NAME_COLUMN, &zone_name, -1);

                if(zone_name)
                    gtk_label_set_text(GTK_LABEL(add_dcu_label_zone_name), zone_name);
             }
             else
             {
                bot_error_notifice_run("Thông tin khu vực hiện tại không được nhận dạng đúng");
             }
        }
        else
        {
            bot_error_notifice_run(X_NOTIFICE);
            return FALSE;
        }
    }
    else
    {
        bot_error_notifice_run(X_NOTIFICE);
        return FALSE;
    }


    gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), FALSE);
    gint response_id = gtk_dialog_run((GtkDialog *)main_widgets->add_dcu_dialog);

    switch(response_id)
    {
        case DIALOG_OK_RESPONSE:

            DEBUG_1();
            DEBUG("==> zone_id: %d", zone_id);

            dcu_mode = bot_get_mode_name((bot_DCU_MODE_Enum)gtk_combo_box_get_active(GTK_COMBO_BOX(add_dcu_combobox_mode)));
            dcu_id = g_strdup(gtk_entry_get_text(GTK_ENTRY(add_dcu_entry_id)));
            dcu_gps = g_strdup_printf("%s-%s", gtk_entry_get_text(GTK_ENTRY(add_dcu_entry_gps_x)), gtk_entry_get_text(GTK_ENTRY(add_dcu_entry_gps_y)));

            if(g_strcmp0(dcu_id, "")==0)
            {
                gtk_label_set_text(GTK_LABEL(add_dcu_label_error), "Thông tin mã DCU không được để trống!");
            }
            else
            {
                bot_dcu_add_execute(bot_username,
                                                 bot_session_id,
                                                 &parent_iter,
                                                 zone_id,
                                                 dcu_id,
                                                 gtk_entry_get_text(GTK_ENTRY(add_dcu_entry_phone)),
                                                 dcu_gps,
                                                 dcu_mode,
                                                 gtk_entry_get_text(GTK_ENTRY(add_dcu_entry_address)),
                                                 gtk_entry_get_text(GTK_ENTRY(add_dcu_entry_note))
                                                 );
                exit_here = TRUE;
            }

            g_free(dcu_mode);
            g_free(dcu_id);

            break;
        case DIALOG_CANCEL_RESPONSE:
            exit_here = TRUE;
            break;
        default:
            break;
	}

    if(exit_here)
    {
        gtk_entry_set_text(GTK_ENTRY(add_dcu_entry_id), "");
        gtk_entry_set_text(GTK_ENTRY(add_dcu_entry_phone), "");
        gtk_entry_set_text(GTK_ENTRY(add_dcu_entry_gps_x), "");
        gtk_entry_set_text(GTK_ENTRY(add_dcu_entry_gps_y), "");
        gtk_entry_set_text(GTK_ENTRY(add_dcu_entry_address), "");
        gtk_entry_set_text(GTK_ENTRY(add_dcu_entry_note), "");
        gtk_combo_box_set_active(GTK_COMBO_BOX(add_dcu_combobox_mode), 0);
        gtk_label_set_text(GTK_LABEL(add_dcu_label_error), "");
        gtk_label_set_text(GTK_LABEL(add_dcu_label_zone_name), "");
    }
    gtk_widget_hide(main_widgets->add_dcu_dialog);
    gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), TRUE);
    return exit_here;
}

static void bot_dcu_popup_menu_edit_clicked(void)
{
    GtkWidget *edit_dcu_entry_id = GTK_WIDGET(gtk_builder_get_object (bot_builder, "edit_dcu_label_id"));
    GtkWidget *edit_dcu_entry_phone = GTK_WIDGET(gtk_builder_get_object (bot_builder, "edit_dcu_entry_phone"));
    GtkWidget *edit_dcu_entry_gps = GTK_WIDGET(gtk_builder_get_object (bot_builder, "edit_dcu_entry_gps"));
    GtkWidget *edit_dcu_entry_address = GTK_WIDGET(gtk_builder_get_object (bot_builder, "edit_dcu_entry_address"));
    GtkWidget *edit_dcu_entry_note = GTK_WIDGET(gtk_builder_get_object (bot_builder, "edit_dcu_entry_note"));

    GtkTreeIter      iter;
    GtkTreeIter      parent_iter;
    GtkTreeModel     *model;
    GtkTreeSelection *selection;

    selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(dcu_info_tree_view));

    if (gtk_tree_selection_count_selected_rows(selection)  == 1)
    {
        if(gtk_tree_selection_get_selected(selection, &model, &iter))
        {
            gchar *dcu_id;
            gchar *dcu_phone;
            gchar *dcu_gps;
            gchar *dcu_mode;
            gchar *dcu_address;
            gchar *dcu_note;
            gint zone_id;


            gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, DCU_ZONE_NAME_COLUMN, &dcu_id,
                                                             DCU_PHONE_COLUMN, &dcu_phone,
                                                             DCU_GPS_COLUMN, &dcu_gps,
                                                             DCU_MODE_COLUMN, &dcu_mode,
                                                             DCU_ADDRESS_COLUMN, &dcu_address,
                                                             DCU_NOTE_COLUMN, &dcu_note,
                                                             -1);

            gtk_entry_set_text(GTK_ENTRY(edit_dcu_entry_id), dcu_id);

            gtk_entry_set_text(GTK_ENTRY(edit_dcu_entry_address), dcu_address);

            gtk_entry_set_text(GTK_ENTRY(edit_dcu_entry_phone), dcu_phone);
            gtk_entry_set_text(GTK_ENTRY(edit_dcu_entry_gps), dcu_gps);
            gtk_entry_set_text(GTK_ENTRY(edit_dcu_entry_note), dcu_note);

            gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), FALSE);
            gint response_id = gtk_dialog_run(GTK_DIALOG(main_widgets->edit_dcu_dialog));

            if(gtk_tree_model_iter_parent(GTK_TREE_MODEL(model), &parent_iter, &iter))
            {
                gtk_tree_model_get(GTK_TREE_MODEL(model), &parent_iter, ZONE_ID_COLUMN, &zone_id, -1);
            }
            else
            {
                /** Show Error Report Dialog **/
                return;
            }

            switch(response_id)
            {
                case DIALOG_OK_RESPONSE:

                    gboolean edit_result;
                    edit_result = FALSE;

                    dcu_id = g_strdup(gtk_entry_get_text(GTK_ENTRY(edit_dcu_entry_id)));
                    dcu_phone = g_strdup(gtk_entry_get_text(GTK_ENTRY(edit_dcu_entry_phone)));
                    dcu_gps = g_strdup(gtk_entry_get_text(GTK_ENTRY(edit_dcu_entry_gps)));
                    dcu_note = g_strdup(gtk_entry_get_text(GTK_ENTRY(edit_dcu_entry_note)));

                    dcu_address = g_strdup(gtk_entry_get_text(GTK_ENTRY(edit_dcu_entry_address)));
                    if(bot_dcu_edit_execute(bot_username,
                                                          bot_session_id,
                                                          zone_id, dcu_id, dcu_phone, dcu_gps,
                                                          dcu_mode, dcu_address, dcu_note))
                    {
                        bot_dcu_update_info(&iter,
                                                         dcu_id,
                                                         dcu_phone,
                                                         dcu_gps,
                                                         dcu_mode,
                                                         dcu_address,
                                                         dcu_note);
                    }

                    break;
                case DIALOG_CANCEL_RESPONSE:
                    break;
                default:
                    break;
            }
            gtk_widget_hide(main_widgets->edit_dcu_dialog);
            gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), TRUE);
            gtk_entry_set_text(GTK_ENTRY(edit_dcu_entry_id), "");
            gtk_entry_set_text(GTK_ENTRY(edit_dcu_entry_address), "");
            gtk_entry_set_text(GTK_ENTRY(edit_dcu_entry_phone), "");
            gtk_entry_set_text(GTK_ENTRY(edit_dcu_entry_gps), "");
            gtk_entry_set_text(GTK_ENTRY(edit_dcu_entry_note), "");

            g_free(dcu_id);
            g_free(dcu_phone);
            g_free(dcu_gps);
            g_free(dcu_mode);
            g_free(dcu_note);
        }
    }

}

static void bot_dcu_popup_menu_log_clicked(void)
{
    DEBUG_1();
    GtkTreeIter      iter;
    GtkTreeModel     *model;
    GtkTreeSelection *selection;

    GtkWidget *dcu_log_connect_dcu_id = GTK_WIDGET(bot_OBJECT("dcu_log_connect_dcu_id"));

    selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(dcu_info_tree_view));

    if (gtk_tree_selection_count_selected_rows(selection)  == 1)
    {
        if(gtk_tree_selection_get_selected(selection, &model, &iter))
        {
            gchar *dcu_id;
            gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, DCU_ZONE_NAME_COLUMN, &dcu_id, -1);

            if(dcu_id)
                gtk_label_set_text(GTK_LABEL(dcu_log_connect_dcu_id), g_strdup_printf("DCU: %s", dcu_id));
            else
                return;

            if(bot_dcu_log_get_connect_log_execute(bot_username,
                                                                bot_session_id,
                                                                dcu_id,
                                                                EVENT_CONNECT_DCU_LOG))
            {
                bot_dcu_log_get_connect_log_execute(bot_username,
                                                                bot_session_id,
                                                                dcu_id,
                                                                EVENT_DCU_ERR_LOG);

                bot_dcu_log_get_connect_log_execute(bot_username,
                                                                bot_session_id,
                                                                dcu_id,
                                                                EVENT_LCU_ERR_LOG);

                bot_dcu_log_get_connect_log_execute(bot_username,
                                                                bot_session_id,
                                                                dcu_id,
                                                                EVENT_LINE_ERR_LOG);

                DEBUG_1();
                bot_dcu_log_connect_show();
            }

        }
    }
}

static gboolean bot_dcu_update_info(GtkTreeIter *iter,
                                                 gchar *dcu_id,
                                                 gchar *dcu_phone,
                                                 gchar *dcu_gps,
                                                 gchar *dcu_mode,
                                                 gchar *dcu_address,
                                                 gchar *dcu_note)
{
    DEBUG("\n dcu_note: %s", dcu_note);
    gchar *dcu_status;
//    gchar *dcu_lcu_program;
//    gchar *dcu_line_program;
    gchar *dcu_zone_name;
    gint dcu_zone_id;

    GtkTreeStore *model = dcu_widgets->dcu_info_tree_store;
    gtk_tree_store_set(model, iter,
                   DCU_PHONE_COLUMN , dcu_phone,
                   DCU_GPS_COLUMN   , dcu_gps,
                   DCU_ADDRESS_COLUMN  , dcu_address,
                   DCU_NOTE_COLUMN  , dcu_note,
                   -1);

    gtk_tree_model_get(GTK_TREE_MODEL(model), iter,
                           DCU_STATUS_COLUMN, &dcu_status,
                           ZONE_ID_COLUMN, &dcu_zone_id,
                           ZONE_NAME_COLUMN, &dcu_zone_name,
                            -1);

    bot_dcu_show_specific_info(dcu_id, dcu_phone, dcu_gps, dcu_address, dcu_note,
                                            dcu_mode, dcu_status, NULL, NULL,
                                            dcu_zone_id, dcu_zone_name);

    g_free(dcu_status);
    g_free(dcu_zone_name);


#if 0
    gchar *dcu_id_buffer;
    gchar *dcu_mode_buffer;
    gchar *dcu_status;
    gchar *dcu_lcu_program;
    gchar *dcu_line_program;

    gtk_tree_model_get_iter_first(GTK_TREE_MODEL(model), &iter);
    do
    {
        gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, DCU_ID_COLUMN, &dcu_id_buffer,
                                                                       DCU_MODE_COLUMN, &dcu_mode_buffer,
                                                                       DCU_STATUS_COLUMN, &dcu_status,
                                                                       DCU_LCU_PROGRAM_COLUMN, &dcu_lcu_program,
                                                                       DCU_LINE_PROGRAM_COLUMN, &dcu_line_program,
                                                                        -1);

        if(g_strcmp0(dcu_id_buffer, dcu_id)==0)
        {
            gtk_tree_store_set(model, &iter,
                               DCU_PHONE_COLUMN , dcu_phone,
                               DCU_GPS_COLUMN   , dcu_gps,
                               DCU_ADDRESS_COLUMN  , dcu_address,
                               DCU_NOTE_COLUMN  , dcu_note,
                               -1);

            bot_dcu_show_specific_info(dcu_id, dcu_phone, dcu_gps, dcu_address, dcu_note,
                                                            dcu_mode, dcu_status, dcu_lcu_program, dcu_line_program);
            break;
        }

        DEBUG("\n\n dcu_id_buffer: %s", dcu_id_buffer);
        g_free(dcu_id_buffer);
        g_free(dcu_mode_buffer);
    }
    while(gtk_tree_model_iter_next(GTK_TREE_MODEL(model), &iter));
#endif // 0

}


static void bot_dcu_popup_menu_schedule_clicked(void)
{
    DEBUG_1();
}


static void bot_dcu_popup_menu_remove_clicked(void)
{
    GtkTreeIter      iter;
    GtkTreeModel     *model;
    GtkTreeSelection *selection;


    selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(dcu_info_tree_view));

    if (gtk_tree_selection_count_selected_rows(selection)  == 1)
    {
        if(gtk_tree_selection_get_selected(selection, &model, &iter))
        {
            gchar *dcu_id;
            gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, DCU_ZONE_NAME_COLUMN, &dcu_id, -1);
            DEBUG("\n REMOVE DCU with dcu_id: %s\n\n", dcu_id);
            gtk_label_set_text(GTK_LABEL(bot_OBJECT("delete_dialog_label")), "Xóa DCU với mã sau:");
            gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "delete_element_id")), dcu_id);

            gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), FALSE);
            gint response_id = gtk_dialog_run((GtkDialog *)main_widgets->delete_element_dialog);

            switch(response_id)
            {
                case DIALOG_OK_RESPONSE:
                    if(bot_dcu_remove_execute(bot_username,
                                                           bot_session_id,
                                                           dcu_id))
                    {
                        gtk_list_store_remove(GTK_LIST_STORE(model), &iter);
                        bot_dcu_clean_specific_area(dcu_id);
                    }
                    break;
                case DIALOG_CANCEL_RESPONSE:

                    break;
                default:
                    break;
            }
            gtk_widget_hide(main_widgets->delete_element_dialog);
            gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), TRUE);
            g_free(dcu_id);
        }
    }
}

static void bot_dcu_popup_menu_remove_all_clicked(void)
{
    DEBUG_1();
    DEBUG("===== ENTER REMOVE ALL DCU =====");
}




static void bot_dcu_popup_menu_clicked(GtkWidget *popup_menu_item, gpointer userdata)
{
    bot_DCU_POPUP_MENU_Enum type = (bot_DCU_POPUP_MENU_Enum)GPOINTER_TO_INT(userdata);
    switch(type)
    {
    case bot_DCU_M_ADD:
        gboolean add_result;
        do
        {
            add_result = bot_dcu_popup_menu_add_clicked();
        }
        while(!add_result);
        break;
    case bot_DCU_M_EDIT:
        bot_dcu_popup_menu_edit_clicked();
        break;
    case bot_DCU_M_LOG:
        bot_dcu_popup_menu_log_clicked();
        break;
    case bot_DCU_M_SCHEDULE:
        bot_dcu_popup_menu_schedule_clicked();
        break;
    case bot_DCU_M_REMOVE:
        bot_dcu_popup_menu_remove_clicked();
        break;
    case bot_DCU_M_REMOVE_ALL:
        bot_dcu_popup_menu_remove_all_clicked();
        break;
    default:
        break;
    }
}

static void bot_dcu_popup_menu_widget_init(void)
{
    GtkWidget *separator_item;
    dcu_info_popup_menu->M_Popup = gtk_menu_new();
    bot_MENU_CSS(dcu_info_popup_menu->M_Popup);

    dcu_info_popup_menu->M_Add = gtk_menu_item_new_with_label("Thêm mới");
    gtk_menu_shell_append(GTK_MENU_SHELL(dcu_info_popup_menu->M_Popup),dcu_info_popup_menu->M_Add);

    separator_item = gtk_separator_menu_item_new();
    gtk_menu_shell_append(GTK_MENU_SHELL(dcu_info_popup_menu->M_Popup), separator_item);

    dcu_info_popup_menu->M_Edit = gtk_menu_item_new_with_label("Chỉnh sửa");
    gtk_menu_shell_append(GTK_MENU_SHELL(dcu_info_popup_menu->M_Popup),dcu_info_popup_menu->M_Edit);

    separator_item = gtk_separator_menu_item_new();
    gtk_menu_shell_append(GTK_MENU_SHELL(dcu_info_popup_menu->M_Popup), separator_item);

    dcu_info_popup_menu->M_Log = gtk_menu_item_new_with_label("Nhật ký");
    gtk_menu_shell_append(GTK_MENU_SHELL(dcu_info_popup_menu->M_Popup),dcu_info_popup_menu->M_Log);

    separator_item = gtk_separator_menu_item_new();
    gtk_menu_shell_append(GTK_MENU_SHELL(dcu_info_popup_menu->M_Popup), separator_item);

    dcu_info_popup_menu->M_Schedule = gtk_menu_item_new_with_label("Lập lịch");
    gtk_menu_shell_append(GTK_MENU_SHELL(dcu_info_popup_menu->M_Popup),dcu_info_popup_menu->M_Schedule);

    separator_item = gtk_separator_menu_item_new();
    gtk_menu_shell_append(GTK_MENU_SHELL(dcu_info_popup_menu->M_Popup), separator_item);

    dcu_info_popup_menu->M_Remove= gtk_menu_item_new_with_label("Xóa");
    gtk_menu_shell_append(GTK_MENU_SHELL(dcu_info_popup_menu->M_Popup),dcu_info_popup_menu->M_Remove);

    dcu_info_popup_menu->M_Remove_all = gtk_menu_item_new_with_label("Xóa tất cả");
    gtk_menu_shell_append(GTK_MENU_SHELL(dcu_info_popup_menu->M_Popup),dcu_info_popup_menu->M_Remove_all);

}

static void bot_dcu_popup_menu_callback_init(void)
{

    g_signal_connect(dcu_info_popup_menu->M_Add, "activate",
                     (GCallback) bot_dcu_popup_menu_clicked, GINT_TO_POINTER(bot_DCU_M_ADD));

    g_signal_connect(dcu_info_popup_menu->M_Edit, "activate",
                     (GCallback) bot_dcu_popup_menu_clicked, GINT_TO_POINTER(bot_DCU_M_EDIT));

    g_signal_connect(dcu_info_popup_menu->M_Log, "activate",
                     (GCallback) bot_dcu_popup_menu_clicked, GINT_TO_POINTER(bot_DCU_M_LOG));

    g_signal_connect(dcu_info_popup_menu->M_Schedule, "activate",
                     (GCallback) bot_dcu_popup_menu_clicked, GINT_TO_POINTER(bot_DCU_M_SCHEDULE));

    g_signal_connect(dcu_info_popup_menu->M_Remove, "activate",
                     (GCallback) bot_dcu_popup_menu_clicked, GINT_TO_POINTER(bot_DCU_M_REMOVE));

    g_signal_connect(dcu_info_popup_menu->M_Remove_all, "activate",
                     (GCallback) bot_dcu_popup_menu_clicked, GINT_TO_POINTER(bot_DCU_M_REMOVE_ALL));
}

static gboolean bot_dcu_popup_menu_init()
{
    dcu_info_popup_menu = g_new0(struct bot_DCU_POPUP_MENU, 1);

    bot_dcu_popup_menu_widget_init();
    bot_dcu_popup_menu_callback_init();

    return TRUE;
}


static gboolean bot_dcu_callback_init()
{
    g_signal_connect(GTK_TREE_VIEW(dcu_info_tree_view),
                     "button-press-event",
                     G_CALLBACK(on_bot_dcu_specical_clicked), NULL);

//    g_signal_connect(GTK_BUTTON(gtk_builder_get_object (bot_builder, "button_choose_start_time")),
//                     "clicked",
//                     G_CALLBACK(on_bot_dcu_choose_start_time), NULL);
//
//    g_signal_connect(GTK_BUTTON(gtk_builder_get_object (bot_builder, "button_dcu_update")),
//                     "clicked",
//                     G_CALLBACK(on_bot_dcu_update), NULL);

    return TRUE;
}

static gboolean bot_dcu_tree_store_init(void)
{
    bot_dcu_tree_store_init_zone_dcu_info();

    return TRUE;
}

static void bot_dcu_tree_store_init_zone_dcu_info(void)
{
    DEBUG_1();
    dcu_widgets->dcu_info_tree_store = gtk_tree_store_new(DCU_ZONE_NUM_COLUMNS,
                                                            G_TYPE_STRING,  // name zone + dcu id
                                                            G_TYPE_STRING,  // phone
                                                            G_TYPE_STRING,  // gps
                                                            G_TYPE_STRING,  // address
                                                            G_TYPE_STRING,  // note
                                                            G_TYPE_STRING,  // mode
                                                            G_TYPE_STRING,  // status
                                                            G_TYPE_INT,     // current schedule id
                                                            G_TYPE_INT,     // program id
                                                            G_TYPE_INT,     // zoneid
                                                            G_TYPE_STRING,  // zone_name
                                                            G_TYPE_STRING,  // zone_note
                                                            G_TYPE_INT);    // column_type


    gtk_tree_view_set_model(GTK_TREE_VIEW(dcu_info_tree_view), GTK_TREE_MODEL(dcu_widgets->dcu_info_tree_store));
    g_object_unref(dcu_widgets->dcu_info_tree_store);

//    GtkTreeIter iter;
//    GtkTreeIter child_iter;
//    GtkTreeStore *model = dcu_widgets->dcu_info_tree_store;
//    gtk_tree_store_append (model, &iter, NULL);
//    gtk_tree_store_set (model, &iter,
//                          0, "alvinnguyen",
//                          -1);
//    DEBUG_1();
//    gtk_tree_store_append (model, &child_iter, &iter);
//    gtk_tree_store_set (model, &child_iter,
//                          0, "alvinnguyen_child",
//                          -1);
//    DEBUG_1();
}


static gboolean bot_dcu_list_store_init(void)
{
    bot_dcu_list_store_init_dcu_list();

    bot_dcu_list_store_init_connect_log();
    bot_dcu_list_store_init_dcu_log();
    bot_dcu_list_store_init_lcu_log();
    bot_dcu_list_store_init_line_log();

    return TRUE;
}

static void bot_dcu_list_store_init_dcu_list(void)
{
    #if 0
    dcu_info_list_store = gtk_list_store_new(DCU_NUM_COLUMNS,
                                            G_TYPE_BOOLEAN,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING);

    gtk_tree_view_set_model(GTK_TREE_VIEW(dcu_info_tree_view), GTK_TREE_MODEL(dcu_info_list_store));
    g_object_unref(dcu_info_list_store);
    #endif // 0
}


static void bot_dcu_list_store_init_connect_log(void)
{
    dcu_widgets->dcu_log_connect_liststore = gtk_list_store_new(DCU_LOG_NUM_COLUMNS,
                                            G_TYPE_INT,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_INT,
                                            G_TYPE_STRING);

    gtk_tree_view_set_model(GTK_TREE_VIEW(dcu_widgets->dcu_log_connect_treeview),
                            GTK_TREE_MODEL(dcu_widgets->dcu_log_connect_liststore));
    g_object_unref(dcu_widgets->dcu_log_connect_liststore);
}

static void bot_dcu_list_store_init_dcu_log(void)
{
    DEBUG_1();
    dcu_widgets->dcu_log_dcu_liststore = gtk_list_store_new(DCU_LOG_NUM_COLUMNS,
                                            G_TYPE_INT,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_INT,
                                            G_TYPE_STRING);

    gtk_tree_view_set_model(GTK_TREE_VIEW(dcu_widgets->dcu_log_dcu_treeview),
                            GTK_TREE_MODEL(dcu_widgets->dcu_log_dcu_liststore));
    g_object_unref(dcu_widgets->dcu_log_dcu_liststore);
}

static void bot_dcu_list_store_init_lcu_log(void)
{
    DEBUG_1();
    dcu_widgets->dcu_log_lcu_liststore = gtk_list_store_new(DCU_LOG_NUM_COLUMNS,
                                            G_TYPE_INT,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_INT,
                                            G_TYPE_STRING);

    gtk_tree_view_set_model(GTK_TREE_VIEW(dcu_widgets->dcu_log_lcu_treeview),
                            GTK_TREE_MODEL(dcu_widgets->dcu_log_lcu_liststore));
    g_object_unref(dcu_widgets->dcu_log_lcu_liststore);
}

static void bot_dcu_list_store_init_line_log(void)
{
    DEBUG_1();
    dcu_widgets->dcu_log_line_liststore = gtk_list_store_new(DCU_LOG_NUM_COLUMNS,
                                            G_TYPE_INT,
                                            G_TYPE_STRING,
                                            G_TYPE_STRING,
                                            G_TYPE_INT,
                                            G_TYPE_STRING);

    gtk_tree_view_set_model(GTK_TREE_VIEW(dcu_widgets->dcu_log_line_treeview),
                            GTK_TREE_MODEL(dcu_widgets->dcu_log_line_liststore));
    g_object_unref(dcu_widgets->dcu_log_line_liststore);
}


static gboolean bot_dcu_tree_view_init(void)
{
    bot_dcu_tree_view_init_dcu_list();

    bot_dcu_tree_view_init_connect_log();
    bot_dcu_tree_view_init_dcu_log();
    bot_dcu_tree_view_init_lcu_log();
    bot_dcu_tree_view_init_line_log();

    return TRUE;
}


static void bot_dcu_tree_view_init_dcu_list(void)
{

    GtkTreeViewColumn *dcu_list_column;
    GtkCellRenderer *dcu_list_renderer;

    dcu_info_tree_view = GTK_TREE_VIEW(gtk_builder_get_object (bot_builder, "dcu_info_tree_view"));

    #if 0 /** init for list store **/

    dcu_list_renderer = gtk_cell_renderer_toggle_new();
    dcu_list_column = gtk_tree_view_column_new_with_attributes ("", dcu_list_renderer, "active", DCU_ZONE_COLUMN, NULL);
    gtk_tree_view_append_column (GTK_TREE_VIEW(dcu_info_tree_view), dcu_list_column);

    dcu_list_renderer = gtk_cell_renderer_text_new();
    dcu_list_column = gtk_tree_view_column_new_with_attributes("Mã:", dcu_list_renderer, "text", DCU_ID_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(dcu_list_column,TRUE);
    gtk_tree_view_column_set_reorderable(dcu_list_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_info_tree_view), dcu_list_column);


//    dcu_list_renderer = gtk_cell_renderer_text_new();
//    dcu_list_column = gtk_tree_view_column_new_with_attributes("Số Điện Thoại:", dcu_list_renderer, "text", DCU_PHONE_COLUMN, NULL);
//    gtk_tree_view_column_set_resizable(dcu_list_column,TRUE);
//    gtk_tree_view_column_set_reorderable(dcu_list_column, TRUE);
//    gtk_tree_view_column_set_visible(dcu_list_column, FALSE);
//    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_info_tree_view), dcu_list_column);
//
//    dcu_list_renderer = gtk_cell_renderer_text_new();
//    dcu_list_column = gtk_tree_view_column_new_with_attributes("Tọa Độ GPS:", dcu_list_renderer, "text", DCU_GPS_COLUMN, NULL);
//    gtk_tree_view_column_set_resizable(dcu_list_column,TRUE);
//    gtk_tree_view_column_set_reorderable(dcu_list_column, TRUE);
//    gtk_tree_view_column_set_visible(dcu_list_column, FALSE);
//    gtk_tree_view_column_set_
//    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_info_tree_view), dcu_list_column);
//
//    dcu_list_renderer = gtk_cell_renderer_text_new();
//    dcu_list_column = gtk_tree_view_column_new_with_attributes("Street:", dcu_list_renderer, "text", DCU_STREET_COLUMN, NULL);
//    gtk_tree_view_column_set_resizable(dcu_list_column,TRUE);
//    gtk_tree_view_column_set_reorderable(dcu_list_column, TRUE);
//    gtk_tree_view_column_set_visible(dcu_list_column, FALSE);
//    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_info_tree_view), dcu_list_column);
//
//    dcu_list_renderer = gtk_cell_renderer_text_new();
//    dcu_list_column = gtk_tree_view_column_new_with_attributes("Zone:", dcu_list_renderer, "text", DCU_ZONE_COLUMN, NULL);
//    gtk_tree_view_column_set_resizable(dcu_list_column,TRUE);
//    gtk_tree_view_column_set_reorderable(dcu_list_column, TRUE);
//    gtk_tree_view_column_set_visible(dcu_list_column, FALSE);
//    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_info_tree_view), dcu_list_column);
//
//    dcu_list_renderer = gtk_cell_renderer_text_new();
//    dcu_list_column = gtk_tree_view_column_new_with_attributes("Ghi Chú:", dcu_list_renderer, "text", DCU_NOTE_COLUMN, NULL);
//    gtk_tree_view_column_set_resizable(dcu_list_column,TRUE);
//    gtk_tree_view_column_set_reorderable(dcu_list_column, TRUE);
//    gtk_tree_view_column_set_visible(dcu_list_column, FALSE);
//    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_info_tree_view), dcu_list_column);
//
//    dcu_list_renderer = gtk_cell_renderer_text_new();
//    dcu_list_column = gtk_tree_view_column_new_with_attributes("Mode:", dcu_list_renderer, "text", DCU_MODE_COLUMN, NULL);
//    gtk_tree_view_column_set_resizable(dcu_list_column,TRUE);
//    gtk_tree_view_column_set_reorderable(dcu_list_column, TRUE);
//    gtk_tree_view_column_set_visible(dcu_list_column, FALSE);
//    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_info_tree_view), dcu_list_column);
//
//    dcu_list_renderer = gtk_cell_renderer_text_new();
//    dcu_list_column = gtk_tree_view_column_new_with_attributes("Trạng Thái:", dcu_list_renderer, "text", DCU_STATUS_COLUMN, NULL);
//    gtk_tree_view_column_set_resizable(dcu_list_column,TRUE);
//    gtk_tree_view_column_set_reorderable(dcu_list_column, TRUE);
//    gtk_tree_view_column_set_visible(dcu_list_column, FALSE);
//    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_info_tree_view), dcu_list_column);
//
//    dcu_list_renderer = gtk_cell_renderer_text_new();
//    dcu_list_column = gtk_tree_view_column_new_with_attributes("LCU Program:", dcu_list_renderer, "text", DCU_LCU_PROGRAM_COLUMN, NULL);
//    gtk_tree_view_column_set_resizable(dcu_list_column,TRUE);
//    gtk_tree_view_column_set_reorderable(dcu_list_column, TRUE);
//    gtk_tree_view_column_set_visible(dcu_list_column, FALSE);
//    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_info_tree_view), dcu_list_column);
//
//    dcu_list_renderer = gtk_cell_renderer_text_new();
//    dcu_list_column = gtk_tree_view_column_new_with_attributes("Zone Program:", dcu_list_renderer, "text", DCU_LINE_PROGRAM_COLUMN, NULL);
//    gtk_tree_view_column_set_resizable(dcu_list_column,TRUE);
//    gtk_tree_view_column_set_reorderable(dcu_list_column, TRUE);
//    gtk_tree_view_column_set_visible(dcu_list_column, FALSE);
//    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_info_tree_view), dcu_list_column);

    gtk_tree_view_set_enable_search(GTK_TREE_VIEW(dcu_info_tree_view), TRUE);
    gtk_tree_view_set_search_column(GTK_TREE_VIEW(dcu_info_tree_view), DCU_ID_COLUMN);
    gtk_tree_view_set_search_entry(GTK_TREE_VIEW(dcu_info_tree_view),
                                   GTK_ENTRY(gtk_builder_get_object (bot_builder, "dcu_list_search_entry")));
    #else
    /** init for tree store **/

    gint col_offset;

    /* create zone name column */
    dcu_list_renderer = gtk_cell_renderer_text_new ();
    g_object_set (dcu_list_renderer, "xalign", 0.0, NULL);

    col_offset = gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW (dcu_info_tree_view),
                                                            -1, "Khu Vực",
                                                            dcu_list_renderer, "text",
                                                            DCU_ZONE_NAME_COLUMN,
                                                            NULL);
    dcu_list_column = gtk_tree_view_get_column (GTK_TREE_VIEW (dcu_info_tree_view), col_offset - 1);
    gtk_tree_view_column_set_clickable (GTK_TREE_VIEW_COLUMN (dcu_list_column), TRUE);

    /* create ID DCU column */

//    dcu_list_renderer = gtk_cell_renderer_toggle_new ();
//    g_object_set (dcu_list_renderer, "xalign", 0.0, NULL);
////    g_object_set_data (G_OBJECT (dcu_list_renderer), "column", (gint *)ALEX_COLUMN);
//
////    g_signal_connect (dcu_list_renderer, "toggled", G_CALLBACK (item_toggled), model);
//
//    col_offset = gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW (dcu_info_tree_view),
//                                                            -1, "Alex",
//                                                            dcu_list_renderer,
//                                                            "text",
//                                                            ALEX_COLUMN,
//                                                            "visible",
//                                                            VISIBLE_COLUMN,
//                                                            "activatable",
//                                                            WORLD_COLUMN, NULL);
//
//    dcu_list_column = gtk_tree_view_get_column (GTK_TREE_VIEW (dcu_info_tree_view), col_offset - 1);
//    gtk_tree_view_column_set_sizing (GTK_TREE_VIEW_COLUMN (dcu_list_column),
//                                   GTK_TREE_VIEW_COLUMN_FIXED);
//    gtk_tree_view_column_set_fixed_width (GTK_TREE_VIEW_COLUMN (dcu_list_column), 50);
//    gtk_tree_view_column_set_clickable (GTK_TREE_VIEW_COLUMN (dcu_list_column), TRUE);
    #endif
}



static void bot_dcu_tree_view_init_connect_log(void)
{
    DEBUG_1();
    GtkTreeViewColumn *connect_log_column;
    GtkCellRenderer *connect_log_renderer;

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("ID:", connect_log_renderer, "text", DCU_LOG_ID_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_connect_treeview), connect_log_column);


    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Mã DCU:", connect_log_renderer, "text", DCU_LOG_DCU_ID_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_connect_treeview), connect_log_column);


    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Nội dung:", connect_log_renderer, "text", DCU_LOG_CONTENT_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_connect_treeview), connect_log_column);


    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Loại:", connect_log_renderer, "text", DCU_LOG_TYPE_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_connect_treeview), connect_log_column);


    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Thời gian:", connect_log_renderer, "text", DCU_LOG_TIME_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_connect_treeview), connect_log_column);


    gtk_tree_view_set_enable_search(GTK_TREE_VIEW(dcu_widgets->dcu_log_connect_treeview), TRUE);
    gtk_tree_view_set_search_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_connect_treeview), DCU_LOG_DCU_ID_COLUMN);
    gtk_tree_view_set_search_entry(GTK_TREE_VIEW(dcu_widgets->dcu_log_connect_treeview),
                                   GTK_ENTRY(gtk_builder_get_object (bot_builder, "???")));
}

static void bot_dcu_tree_view_init_dcu_log(void)
{
    DEBUG_1();
    GtkTreeViewColumn *connect_log_column;
    GtkCellRenderer *connect_log_renderer;

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("ID:", connect_log_renderer, "text", DCU_LOG_ID_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_dcu_treeview), connect_log_column);


    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Mã DCU:", connect_log_renderer, "text", DCU_LOG_DCU_ID_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_dcu_treeview), connect_log_column);

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Nội dung:", connect_log_renderer, "text", DCU_LOG_CONTENT_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_dcu_treeview), connect_log_column);

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Loại:", connect_log_renderer, "text", DCU_LOG_TYPE_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_dcu_treeview), connect_log_column);

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Thời gian:", connect_log_renderer, "text", DCU_LOG_TIME_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_dcu_treeview), connect_log_column);
}

static void bot_dcu_tree_view_init_lcu_log(void)
{
    DEBUG_1();
    GtkTreeViewColumn *connect_log_column;
    GtkCellRenderer *connect_log_renderer;

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("ID:", connect_log_renderer, "text", DCU_LOG_ID_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_lcu_treeview), connect_log_column);


    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Mã DCU:", connect_log_renderer, "text", DCU_LOG_DCU_ID_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_lcu_treeview), connect_log_column);

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Nội dung:", connect_log_renderer, "text", DCU_LOG_CONTENT_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_lcu_treeview), connect_log_column);

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Loại:", connect_log_renderer, "text", DCU_LOG_TYPE_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_lcu_treeview), connect_log_column);

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Thời gian:", connect_log_renderer, "text", DCU_LOG_TIME_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_lcu_treeview), connect_log_column);
}

static void bot_dcu_tree_view_init_line_log(void)
{
    DEBUG_1();
    GtkTreeViewColumn *connect_log_column;
    GtkCellRenderer *connect_log_renderer;

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("ID:", connect_log_renderer, "text", DCU_LOG_ID_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_line_treeview), connect_log_column);


    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Mã DCU:", connect_log_renderer, "text", DCU_LOG_DCU_ID_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_line_treeview), connect_log_column);

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Nội dung:", connect_log_renderer, "text", DCU_LOG_CONTENT_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_line_treeview), connect_log_column);

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Loại:", connect_log_renderer, "text", DCU_LOG_TYPE_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_line_treeview), connect_log_column);

    connect_log_renderer = gtk_cell_renderer_text_new();
    connect_log_column = gtk_tree_view_column_new_with_attributes("Thời gian:", connect_log_renderer, "text", DCU_LOG_TIME_COLUMN, NULL);
    gtk_tree_view_column_set_resizable(connect_log_column,TRUE);
    gtk_tree_view_column_set_reorderable(connect_log_column, TRUE);
    gtk_tree_view_append_column(GTK_TREE_VIEW(dcu_widgets->dcu_log_line_treeview), connect_log_column);
}


static void bot_dcu_fill_old(gchar *dcu_name, gchar *dcu_phone, gchar *dcu_schedule)
{
}


void bot_dcu_fill_infomation(GtkTreeIter *zone_tree_iter,
                                          gchar *dcu_name,
                                           gchar *dcu_phone,
                                           gchar *dcu_gps,
                                           gchar *dcu_address,
                                           gchar *dcu_note,
                                           gchar *dcu_mode,
                                           gchar *dcu_status,
                                           gint dcu_curr_schedule,
                                           gint dcu_program,
                                           gint dcu_zoneid)
{

    DEBUG("\n FILL DCU dcu_name: %s", dcu_name);
    DEBUG("\n FILL DCU dcu_phone: %s", dcu_phone);
    DEBUG("\n FILL DCU dcu_gps: %s", dcu_gps);
    DEBUG("\n FILL DCU dcu_mode: %s", dcu_mode);
    DEBUG("\n FILL DCU dcu_address: %s", dcu_address);
    DEBUG("\n FILL DCU dcu_note: %s", dcu_note);
    DEBUG("\n FILL DCU dcu_status: %s", dcu_status);
    DEBUG("\n FILL DCU dcu_program: %s", dcu_program);
    DEBUG("\n FILL DCU dcu_zoneid: %d", dcu_zoneid);

    GtkTreeIter dcu_iter;
    GtkTreeStore *model = dcu_widgets->dcu_info_tree_store;

    /**

        DCU_ZONE_NAME_COLUMN = 0,
        DCU_PHONE_COLUMN,
        DCU_GPS_COLUMN,
        DCU_ADDRESS_COLUMN,
        DCU_NOTE_COLUMN,
        DCU_MODE_COLUMN,
        DCU_STATUS_COLUMN,
        DCU_CURR_SCHEDULE_COLUMN,
        DCU_PROGRAM_COLUMN,
        ZONE_ID_COLUMN,
        ZONE_NAME_COLUMN,
        ZONE_NOTE_COLUMN,
        TYPE_ROW_COMLUMN,
        DCU_ZONE_NUM_COLUMNS


    **/

//    gint *curr_zoneid;
//    gtk_tree_model_get(GTK_TREE_MODEL(dcu_widgets->dcu_info_tree_store), &zone_tree_iter,
//                                                                        ZONE_ID_COLUMN, &curr_zoneid, -1);

//    if(curr_zoneid !=dcu_zoneid)
//    {
//
//        return;
//    }


    gtk_tree_store_append (model, &dcu_iter, zone_tree_iter);
    gtk_tree_store_set(model, &dcu_iter,
                       DCU_ZONE_NAME_COLUMN,    dcu_name,
                       DCU_PHONE_COLUMN,        dcu_phone,
                       DCU_GPS_COLUMN,          dcu_gps,
                       DCU_ADDRESS_COLUMN,      dcu_address,
                       DCU_NOTE_COLUMN,         dcu_note,
                       DCU_MODE_COLUMN,         dcu_mode,
                       DCU_STATUS_COLUMN,       dcu_status,
                       DCU_CURR_SCHEDULE_COLUMN,dcu_curr_schedule,
                       DCU_PROGRAM_COLUMN,      dcu_program,
                       TYPE_ROW_COMLUMN, (gint)DCU_TREE_STORE_DCU_TYPE,
                        -1);
}


gboolean bot_dcu_info_init(void)
{
    DEBUG("\n\n*************************** ENTER bot_dcu_info_init!! *******************\n\n");

    dcu_widgets = g_slice_new(bot_DCU_Widgets);

    dcu_widgets->dcu_log_connect_treeview = GTK_TREE_VIEW(bot_OBJECT("dcu_log_connect_treeview"));
    dcu_widgets->dcu_log_dcu_treeview = GTK_TREE_VIEW(bot_OBJECT("dcu_log_dcu_treeview"));
    dcu_widgets->dcu_log_lcu_treeview = GTK_TREE_VIEW(bot_OBJECT("dcu_log_lcu_treeview"));
    dcu_widgets->dcu_log_line_treeview = GTK_TREE_VIEW(bot_OBJECT("dcu_log_line_treeview"));

//    dcu_widgets->lcu_control_treeview_schedule = GTK_TREE_VIEW(bot_OBJECT("lcu_control_treeview_schedule"));

    if(bot_dcu_tree_view_init())
    {
        if (bot_dcu_list_store_init())
        {
            if (bot_dcu_tree_store_init())
            {
                if (bot_dcu_popup_menu_init())
                {
                    if (bot_dcu_callback_init())
                    {
                        bot_dcu_specific_gui_update(bot_DCU_Init);
                        return TRUE;
                    }
                }
            }
        }
    }
    return FALSE;
}

void bot_dcu_show_specific_info(gchar *dcu_id, gchar *dcu_phone, gchar *dcu_gps,
                                             gchar *dcu_address, gchar *dcu_note, gchar *dcu_mode, gchar *dcu_status,
                                             gchar *dcu_lcu_program, gchar *dcu_line_program,
                                             gint dcu_zone_id, gchar *dcu_zone_name)
{
    DEBUG_1();
    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "lb_dcu_id")),
                       dcu_id);

    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "lb_dcu_phone")),
                       dcu_phone);
    DEBUG_1();
    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "lb_dcu_location")),
                       dcu_gps);

    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "lb_dcu_note")),
                       dcu_note);
    DEBUG_1();

    DEBUG("\n ****** dcu_zone_id: %d", dcu_zone_id);
    DEBUG("\n ****** dcu_zone_name: %s", dcu_zone_name);


    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "lb_dcu_zone")),
                       g_strdup_printf("%d", dcu_zone_id));

    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "lb_dcu_zone")),
                       dcu_zone_name);
//    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "dcu_info_mode")),
//                       dcu_mode);

    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "lb_dcu_status")),
                       dcu_status);

//    gtk_label_set_text(GTK_LABEL(bot_OBJECT("dcu_info_lcu_program")), dcu_lcu_program);
    DEBUG_1();
//    gtk_label_set_text(GTK_LABEL(bot_OBJECT("dcu_info_line_program")), dcu_line_program);

    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "lb_dcu_address")),
                       dcu_address);

//    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "dcu_info_zone_program")),
//                       dcu_lcu_program);
//
//    gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "dcu_info_line_program")),
//                       dcu_line_program);

    DEBUG("\n============================== dcu_mode: %s\n", dcu_mode);

    if(g_strcmp0(dcu_mode, bot_DCU_LINE_MODE)==0)
    {
//        gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "dcu_info_program")),
//                       dcu_line_program);
        DEBUG_1();
//        bot_program_set_value(dcu_line_program);

        bot_dcu_specific_gui_update(bot_DCU_LineMode);
        bot_line_show_list(dcu_id);
        DEBUG_1();
        gtk_combo_box_set_active(GTK_COMBO_BOX(bot_OBJECT("dcu_info_mode_combobox")), (gint)bot_DCU_LineMode);
    }
    else if(g_strcmp0(dcu_mode, bot_DCU_WIRELESS_MODE)==0)
    {
//        gtk_label_set_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "dcu_info_program")),
//                       dcu_lcu_program);
        DEBUG_1();
        DEBUG("\ndcu_lcu_program: %s", dcu_lcu_program);
//        bot_program_set_value(dcu_lcu_program);
        DEBUG_1();
        bot_dcu_specific_gui_update(bot_DCU_WirelessMode);
        DEBUG_1();
        bot_lcu_show_list(dcu_id);
        DEBUG_1();
        gtk_combo_box_set_active(GTK_COMBO_BOX(bot_OBJECT("dcu_info_mode_combobox")), (gint)bot_DCU_WirelessMode);

        gtk_label_set_text(GTK_LABEL(bot_OBJECT("lcu_control_label_program_name")), dcu_lcu_program);
    }
    else
    {
        DEBUG_1();
        gtk_combo_box_set_active(GTK_COMBO_BOX(bot_OBJECT("dcu_info_mode_combobox")), (gint)bot_DCU_UnknownMode);
    }
    DEBUG_1();
    bot_hide_button_combobox();

//    gtk_widget_set_visible(GTK_WIDGET(bot_OBJECT("dcu_info_paned")), TRUE);
}


void bot_dcu_choose_time(void)
{
    DEBUG("\n\n*************************** ENTER bot_dcu_choose_time!! *******************\n\n");
    gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), FALSE);
    gint response_id = gtk_dialog_run(GTK_DIALOG(main_widgets->starttime_choose_dialog));
    // get username
    // get pass

    switch(response_id)
    {
        case DIALOG_OK_RESPONSE:
            break;
        case DIALOG_CANCEL_RESPONSE:
            break;
        default:
            break;
	}

    gtk_widget_hide(main_widgets->starttime_choose_dialog);
	gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), TRUE);
}

void bot_dcu_update(void)
{
    DEBUG("\n\n*************************** ENTER bot_dcu_update!! *******************\n\n");

    gint response_id = gtk_dialog_run(GTK_DIALOG(main_widgets->dcu_update_window));
    // get username
    // get pass

    switch(response_id)
    {
        case DIALOG_OK_RESPONSE:
            gtk_widget_hide(main_widgets->dcu_update_window);
            return;
            break;

        case DIALOG_CANCEL_RESPONSE:
        default:
            gtk_widget_hide(main_widgets->dcu_update_window);
            return;
            break;
	}
}


void bot_dcu_show_all()
{
    DEBUG_1();
//    bot_get_dcu_list_execute(bot_username, bot_session_id);
    bot_get_zone_dcu_execute(bot_username, bot_session_id);
    DEBUG_1();
}


void bot_dcu_liststore_clean()
{
    bot_clear_list_store(GTK_TREE_MODEL(dcu_info_list_store));
}

gchar * bot_get_mode_name(bot_DCU_MODE_Enum index)
{
    switch(index)
    {
    case bot_DCU_WirelessMode:
        return g_strdup(bot_DCU_WIRELESS_MODE);
    case bot_DCU_LineMode:
        return g_strdup(bot_DCU_LINE_MODE);
    case bot_DCU_UnknownMode:
        return g_strdup(bot_DCU_UNKNOWN_MODE);
    default:
        return NULL;
    }
}

gchar * bot_get_status_name(bot_DCU_STATUS_Enum index)
{
    switch(index)
    {
    case bot_DCU_Active:
        return g_strdup(bot_STATUS_ACTIVE);
    case bot_DCU_Unactive:
        return g_strdup(bot_STATUS_INACTIVE);
    default:
        return NULL;
    }
}

static void bot_dcu_specific_gui_update(bot_DCU_MODE_Enum mode)
{
    GtkWidget *lcu_info_box = GTK_WIDGET(gtk_builder_get_object (bot_builder, "lcu_info_box" ));
    GtkWidget *line_info_box= GTK_WIDGET(gtk_builder_get_object (bot_builder, "line_info_box"));

    switch(mode)
    {
    case bot_DCU_WirelessMode:
        gtk_widget_show_all(lcu_info_box);
        gtk_widget_hide(line_info_box);
        gtk_widget_set_visible(GTK_WIDGET(bot_OBJECT("dcu_program_edit_btn")), TRUE);
        break;
    case bot_DCU_LineMode:
        gtk_widget_hide(lcu_info_box);
        gtk_widget_show_all(line_info_box);
        gtk_widget_set_visible(GTK_WIDGET(bot_OBJECT("dcu_program_edit_btn")), TRUE);
        break;
    case bot_DCU_UnknownMode:
        gtk_widget_hide(lcu_info_box);
        gtk_widget_hide(line_info_box);
        break;
    case bot_DCU_Init:
    default:
        gtk_widget_hide(lcu_info_box);
        gtk_widget_hide(line_info_box);
        gtk_widget_set_visible(GTK_WIDGET(bot_OBJECT("dcu_program_edit_btn")), FALSE);
        break;
    }
}


void bot_dcu_popup_menu_show(GtkTreeView *treeview, GdkEventButton *event, gpointer userdata)
{
    gtk_widget_show_all(GTK_WIDGET(dcu_info_popup_menu->M_Popup));
    gtk_menu_popup(GTK_MENU(dcu_info_popup_menu->M_Popup), NULL, NULL, NULL, NULL,
                   (event != NULL) ? event->button : 0, gdk_event_get_time((GdkEvent*)event));
}


gboolean bot_dcu_set_program(const gint zone_id, gchar *dcu_id, gchar *new_program_name)
{
    #if 1
    GtkTreeIter iter;
    GtkTreeIter child_iter;
    gchar *dcu_id_buffer;
    gchar *dcu_mode_buffer;
    gint zone_id_buffer;

    GtkTreeStore *model = dcu_widgets->dcu_info_tree_store;

    if(gtk_tree_model_get_iter_first(GTK_TREE_MODEL(model), &iter))
    {
        DEBUG_1();
        do
        {
            gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, ZONE_ID_COLUMN, &zone_id_buffer, -1);

            DEBUG("\n ==> zone_id_buffer: %d", zone_id_buffer);
            DEBUG("\n ==> zone_id: %d", zone_id);

            if(zone_id_buffer==zone_id)
            {
                DEBUG_1();
                if(gtk_tree_model_iter_children(GTK_TREE_MODEL(model), &child_iter, &iter))
                {
                    DEBUG_1();
                    do
                    {
                        DEBUG_1();
                        gtk_tree_model_get(GTK_TREE_MODEL(model), &child_iter, DCU_ZONE_NAME_COLUMN, &dcu_id_buffer,
                                                                               DCU_MODE_COLUMN, &dcu_mode_buffer,
                                                                               -1);

                        if(g_strcmp0(dcu_id_buffer, dcu_id)==0)
                        {
                            DEBUG_1();
                            if(g_strcmp0(dcu_mode_buffer, bot_DCU_WIRELESS_MODE)==0)
                            {
                                DEBUG_1();
//                                gtk_tree_store_set(model, &child_iter, DCU_LCU_PROGRAM_COLUMN, new_program_name, -1);
                            }
                            else if(g_strcmp0(dcu_mode_buffer, bot_DCU_LINE_MODE)==0)
                            {
                                DEBUG_1();
//                                gtk_tree_store_set(model, &child_iter, DCU_LINE_PROGRAM_COLUMN, new_program_name, -1);
                            }
                            break;
                        }
                        if(dcu_id_buffer)
                            g_free(dcu_id_buffer);
                        if(dcu_mode_buffer)
                            g_free(dcu_mode_buffer);
                    }
                    while(gtk_tree_model_iter_next(GTK_TREE_MODEL(model), &child_iter));
                }
            }
        }
        while(gtk_tree_model_iter_next(GTK_TREE_MODEL(model), &iter));
    }

    return TRUE;

    #else
    GtkTreeIter iter;
    gchar *dcu_id_buffer;
    gchar *dcu_mode_buffer;

    gtk_tree_model_get_iter_first(GTK_TREE_MODEL(dcu_info_list_store), &iter);
    do
    {
        gtk_tree_model_get(GTK_TREE_MODEL(dcu_info_list_store), &iter, DCU_ID_COLUMN, &dcu_id_buffer,
                                                                       DCU_MODE_COLUMN, &dcu_mode_buffer,
                                                                        -1);

        if(g_strcmp0(dcu_id_buffer, dcu_id)==0)
        {
            if(g_strcmp0(dcu_mode_buffer, bot_DCU_WIRELESS_MODE)==0)
            {
                gtk_list_store_set(dcu_info_list_store, &iter, DCU_LCU_PROGRAM_COLUMN, new_program_name,-1);
            }
            else if(g_strcmp0(dcu_mode_buffer, bot_DCU_LINE_MODE)==0)
            {
                gtk_list_store_set(dcu_info_list_store, &iter, DCU_LINE_PROGRAM_COLUMN, new_program_name,-1);
            }
            break;
        }
        if(dcu_id_buffer)
            g_free(dcu_id_buffer);
        if(dcu_mode_buffer)
            g_free(dcu_mode_buffer);
    }
    while(gtk_tree_model_iter_next(GTK_TREE_MODEL(dcu_info_list_store), &iter));
    #endif // 1
}

void bot_show_button_combobox(void)
{
    gtk_widget_set_visible(GTK_WIDGET(bot_OBJECT("dcu_program_update_btn")), TRUE);
    gtk_widget_set_visible(GTK_WIDGET(bot_OBJECT("dcu_program_reload_btn")), TRUE);

    gtk_widget_set_sensitive(GTK_WIDGET(bot_OBJECT("dcu_info_mode_combobox")), FALSE);
    gtk_widget_set_sensitive(GTK_WIDGET(bot_OBJECT("dcu_info_program_combobox")), FALSE);
    gtk_widget_set_sensitive(GTK_WIDGET(bot_OBJECT("dcu_program_update_btn")), FALSE);
    gtk_widget_set_sensitive(GTK_WIDGET(bot_OBJECT("dcu_program_reload_btn")), FALSE);
}

void bot_hide_button_combobox(void)
{
    gtk_widget_set_visible(GTK_WIDGET(bot_OBJECT("dcu_program_update_btn")), FALSE);
    gtk_widget_set_visible(GTK_WIDGET(bot_OBJECT("dcu_program_reload_btn")), FALSE);

    gtk_widget_set_sensitive(GTK_WIDGET(bot_OBJECT("dcu_info_mode_combobox")), FALSE);
    gtk_widget_set_sensitive(GTK_WIDGET(bot_OBJECT("dcu_info_program_combobox")), FALSE);
    gtk_widget_set_sensitive(GTK_WIDGET(bot_OBJECT("dcu_program_update_btn")), FALSE);
    gtk_widget_set_sensitive(GTK_WIDGET(bot_OBJECT("dcu_program_reload_btn")), FALSE);
}

void bot_dcu_schedule_update(void)
{
    DEBUG_1();
    const gchar *dcu_id = gtk_label_get_text(GTK_LABEL(bot_OBJECT("dcu_info_id")));
    const gint dcu_mode = gtk_combo_box_get_active(GTK_COMBO_BOX(bot_OBJECT("dcu_info_mode_combobox")));
    const gchar *dcu_program_name = "aaa"; //bot_program_get_active_name();

    DEBUG("\n ================ zone_id: %s", gtk_label_get_text(GTK_LABEL(bot_OBJECT("dcu_info_zone_id"))));

    const gint zone_id = (gint)g_ascii_strtoll(gtk_label_get_text(GTK_LABEL(bot_OBJECT("dcu_info_zone_id"))), NULL, 0);

    if(bot_dcu_schedule_update_execute(bot_username, bot_session_id,
                                             dcu_id, dcu_mode, dcu_program_name))
    {
        DEBUG_1();
        if(bot_dcu_set_program(zone_id, g_strdup(dcu_id), g_strdup(dcu_program_name)))
        {
            DEBUG_1();
            bot_hide_button_combobox();
        }
        DEBUG_1();

    }
    else
    {
        DEBUG_1();
    }
    DEBUG_1();
}


void bot_dcu_info_edit(void)
{
    bot_dcu_popup_menu_edit_clicked();
}



static void bot_dcu_log_connect_show(void)
{
    gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), FALSE);
    gint response_id = gtk_dialog_run(GTK_DIALOG(main_widgets->devices_log_dialog));

    switch(response_id)
    {
        case DIALOG_OK_RESPONSE:
            break;
        case DIALOG_CANCEL_RESPONSE:
            break;
        default:
            break;
    }
    gtk_widget_hide(main_widgets->devices_log_dialog);
    gtk_widget_set_sensitive(GTK_WIDGET(main_widgets->main_window), TRUE);
}


void bot_dcu_log_connect_log_liststore_clean(void)
{
    DEBUG_1();
    bot_clear_list_store(GTK_TREE_MODEL(dcu_widgets->dcu_log_connect_liststore));
}

void bot_dcu_log_dcu_log_liststore_clean(void)
{
    DEBUG_1();
    bot_clear_list_store(GTK_TREE_MODEL(dcu_widgets->dcu_log_dcu_liststore));
}

void bot_dcu_log_lcu_log_liststore_clean(void)
{
    DEBUG_1();
    bot_clear_list_store(GTK_TREE_MODEL(dcu_widgets->dcu_log_lcu_liststore));
}

void bot_dcu_log_line_log_liststore_clean(void)
{
    DEBUG_1();
    bot_clear_list_store(GTK_TREE_MODEL(dcu_widgets->dcu_log_line_liststore));
}


void bot_dcu_log_connect_log_fill_infomation(const gint event_id,
                                                          const gchar *event_dcu_id,
                                                          const gint event_type,
                                                          const gchar *event_content,
                                                          const gchar *event_time)
{
    GtkTreeIter iter;
    gtk_list_store_append(dcu_widgets->dcu_log_connect_liststore, &iter);
    gtk_list_store_set(dcu_widgets->dcu_log_connect_liststore, &iter,
                       DCU_LOG_ID_COLUMN, event_id,
                       DCU_LOG_DCU_ID_COLUMN, event_dcu_id,
                       DCU_LOG_TYPE_COLUMN, event_type,
                       DCU_LOG_CONTENT_COLUMN, event_content,
                       DCU_LOG_TIME_COLUMN, event_time,
                       -1);
}

void bot_dcu_log_dcu_log_fill_infomation(const gint event_id,
                                                          const gchar *event_dcu_id,
                                                          const gint event_type,
                                                          const gchar *event_content,
                                                          const gchar *event_time)
{
    GtkTreeIter iter;
    gtk_list_store_append(dcu_widgets->dcu_log_dcu_liststore, &iter);
    gtk_list_store_set(dcu_widgets->dcu_log_dcu_liststore, &iter,
                       DCU_LOG_ID_COLUMN, event_id,
                       DCU_LOG_DCU_ID_COLUMN, event_dcu_id,
                       DCU_LOG_TYPE_COLUMN, event_type,
                       DCU_LOG_CONTENT_COLUMN, event_content,
                       DCU_LOG_TIME_COLUMN, event_time,
                       -1);
}

void bot_dcu_log_line_log_fill_infomation(const gint event_id,
                                                          const gchar *event_dcu_id,
                                                          const gint event_type,
                                                          const gchar *event_content,
                                                          const gchar *event_time)
{
    GtkTreeIter iter;
    gtk_list_store_append(dcu_widgets->dcu_log_line_liststore, &iter);
    gtk_list_store_set(dcu_widgets->dcu_log_line_liststore, &iter,
                       DCU_LOG_ID_COLUMN, event_id,
                       DCU_LOG_DCU_ID_COLUMN, event_dcu_id,
                       DCU_LOG_TYPE_COLUMN, event_type,
                       DCU_LOG_CONTENT_COLUMN, event_content,
                       DCU_LOG_TIME_COLUMN, event_time,
                       -1);
}

void bot_dcu_log_lcu_log_fill_infomation(const gint event_id,
                                                          const gchar *event_dcu_id,
                                                          const gint event_type,
                                                          const gchar *event_content,
                                                          const gchar *event_time)
{
    GtkTreeIter iter;
    gtk_list_store_append(dcu_widgets->dcu_log_lcu_liststore, &iter);
    gtk_list_store_set(dcu_widgets->dcu_log_lcu_liststore, &iter,
                       DCU_LOG_ID_COLUMN, event_id,
                       DCU_LOG_DCU_ID_COLUMN, event_dcu_id,
                       DCU_LOG_TYPE_COLUMN, event_type,
                       DCU_LOG_CONTENT_COLUMN, event_content,
                       DCU_LOG_TIME_COLUMN, event_time,
                       -1);
}


void bot_zone_fill_infomation(const gint zone_id,
                                           const gchar *zone_name,
                                           const gchar *zone_note)
{
    GtkTreeIter iter;
    GtkTreeIter child_iter;

    GtkTreeStore *model = dcu_widgets->dcu_info_tree_store;
    /**
        ZONE_ID_COLUMN,
        ZONE_NAME_COLUMN,
        ZONE_NOTE_COLUMN,
        TYPE_ROW_COMLUMN,
    **/
    gtk_tree_store_append (model, &iter, NULL);
    gtk_tree_store_set (model, &iter,
                          DCU_ZONE_NAME_COLUMN, zone_name,
                          ZONE_ID_COLUMN, zone_id,
                          ZONE_NAME_COLUMN, zone_name,
                          ZONE_NOTE_COLUMN, zone_note,
                          TYPE_ROW_COMLUMN, (gint)DCU_TREE_STORE_ZONE_TYPE,
                          -1);
    bot_get_dcu_list_execute(bot_username,
                                          bot_session_id,
                                          zone_id,
                                          &iter);
}
