#include "bot_callback.h"
#include "bot_dcu.h"
#include "bot_schedule.h"
#include "bot_line.h"
#include "bot_lcu.h"
#include "bot_soap.h"
#include "bot_log.h"


void on_dcu_selection_changed (GtkTreeSelection *selection, gpointer user_data)
{
    DEBUG("start ..\n");
    GtkTreeModel *model;
    GtkTreeIter iter;
    GtkTreePath *path;
    if(gtk_tree_selection_get_selected(selection, &model, &iter))
    {
        gint type;
        pbotDcu dcu;
        gtk_tree_model_get(model, &iter, DCU_POINTER_COLUMN, &dcu, DCU_TYPE_COLUMN, &type, -1 );
        if(type != OBJECT_IS_DCU_TYPE)
        {
            GtkTreeIter childIter;
            lastSelectedDcu = NULL;
            if(gtk_tree_model_iter_has_child(model, &iter))
            {
                path = gtk_tree_model_get_path(model, &iter);
                gtk_tree_view_expand_row(GTK_TREE_VIEW(main_view_widgets->dcu_view), path, TRUE);
                if(gtk_tree_model_iter_children(model, &childIter, &iter))
                {
                    gtk_tree_selection_select_iter(selection, &childIter);
                }
                gtk_tree_path_free(path);
            }
            return;
        }
        if(dcu != lastSelectedDcu)
        {
            lastSelectedDcu = dcu;
            if(!showAllLightEnable)
            {
                //looking it on closest using list
                gboolean looked = FALSE;
                //DEBUG("closest dcu length: %d\n", g_slist_length(closestUsingDculist));
                for(GSList *item = closestUsingDculist; item != NULL; item = item->next)
                {
                    pbotDcuClosestUsing closest = (pbotDcuClosestUsing)item->data;
                    //DEBUG("id closest: %s id: %s\n", closest->dcu->priv->id, dcu->priv->id);
                    if(closest->dcu == dcu)
                    {
                        //DEBUG("found DCU with ID: %s\n", dcu->priv->id);
                        g_get_current_time(&closest->last_edit_time);
                        looked = TRUE;
                        break;
                    }
                }
                if(!looked)
                {
                    //DEBUG("Not found DCU with ID: %s\n", dcu->priv->id);
                    bot_add_new_dcu_into_closest_list(dcu);
                    //get all light of this dcu on mysql
                    create_new_light_instances(dcu);
                }
                bot_closeset_list_sort();
            }
            bot_dcu_set_information(lastSelectedDcu);
        }
    }
}

gboolean
on_dcu_view_info_clicked                    (GtkTreeView        *treeview,
                                             GdkEventButton     *event,
                                             gpointer           userdata)
{
    GtkTreeIter iter;
    GtkTreePath *path;
    GtkTreeModel *model = gtk_tree_view_get_model(main_view_widgets->dcu_view);
    gint btnType = event->type;
    GtkTreeSelection *selection = gtk_tree_view_get_selection(main_view_widgets->dcu_view);
    switch(event->button)
    {
    case GDK_BUTTON_MIDDLE:
    case GDK_BUTTON_PRIMARY:
        return FALSE;
    case GDK_BUTTON_SECONDARY:
        if (gtk_tree_view_get_path_at_pos(GTK_TREE_VIEW(treeview), (gint) event->x, (gint) event->y, &path, NULL, NULL, NULL))
        {
            if(gtk_tree_model_get_iter(model, &iter, path))
            {
                gint type;
                pbotDcu dcu;
                gtk_tree_model_get(model, &iter, DCU_POINTER_COLUMN, &dcu, DCU_TYPE_COLUMN, &type, -1);
                if(type == OBJECT_IS_DCU_TYPE)
                {
                    bot_popup_menu_show(dcu_popup_menu->parent, event);
                }
            }
            if(!gtk_tree_selection_path_is_selected(selection, path))
            {
                gtk_tree_selection_select_path(selection, path);
            }
            gtk_tree_path_free(path);
            return FALSE;
        }
        break;
    }
    return TRUE;
}


gboolean on_bot_dcu_active_info_reload_clicked(GtkButton *button, gpointer userdata)
{
    DEBUG_1();
    return TRUE;
}

gboolean on_bot_dcu_active_info_update_clicked(GtkButton *button, gpointer userdata)
{
    DEBUG_1();
    bot_dcu_schedule_update();
    return TRUE;
}

gboolean on_bot_dcu_info_hide_clicked(GtkButton *button, gpointer userdata)
{
    DEBUG_1();
//    gtk_widget_set_visible(GTK_WIDGET(bot_OBJECT("dcu_info_paned")), FALSE);
    gtk_paned_set_position (GTK_PANED(bot_OBJECT("paned3")), 0);
    return TRUE;
}



gboolean bot_callback_init(void)
{
//    g_signal_connect(GTK_LABEL(gtk_builder_get_object (bot_builder, "notebook_user_manager")),
//                     "activate-link",
//                     G_CALLBACK(on_bot_main_notebook_dcu_active), NULL);
//
//    g_signal_connect(GTK_LABEL(gtk_builder_get_object (bot_builder, "notebook_program_manager")),
//                     "activate-link",
//                     G_CALLBACK(on_bot_main_notebook_dcu_active), NULL);
//
//    g_signal_connect(GTK_LABEL(gtk_builder_get_object (bot_builder, "notebook_dcu_manager")),
//                     "activate-link",
//                     G_CALLBACK(on_bot_main_notebook_dcu_active), NULL);
    g_signal_connect(GTK_NOTEBOOK(gtk_builder_get_object (bot_builder, "main_notebook")),
                     "switch-page",
                     G_CALLBACK(on_bot_main_notebook_switch_page), NULL);

//    g_signal_connect(GTK_BUTTON(gtk_builder_get_object (bot_builder, "dcu_zone_program_update_btn")),
//                     "clicked",
//                     G_CALLBACK(on_bot_dcu_program_modified_clicked), NULL);
//
//    g_signal_connect(GTK_BUTTON(gtk_builder_get_object (bot_builder, "dcu_line_program_update_btn")),
//                     "clicked",
//                     G_CALLBACK(on_bot_dcu_program_modified_clicked), NULL);

    g_signal_connect(GTK_BUTTON(gtk_builder_get_object (bot_builder, "dcu_program_edit_btn")),
                     "clicked",
                     G_CALLBACK(on_bot_dcu_program_modified_clicked), NULL);

    g_signal_connect(GTK_BUTTON(gtk_builder_get_object (bot_builder, "dcu_program_reload_btn")),
                     "clicked",
                     G_CALLBACK(on_bot_dcu_active_info_reload_clicked), NULL);

    g_signal_connect(GTK_BUTTON(gtk_builder_get_object (bot_builder, "dcu_program_update_btn")),
                     "clicked",
                     G_CALLBACK(on_bot_dcu_active_info_update_clicked), NULL);

    g_signal_connect(GTK_BUTTON(gtk_builder_get_object (bot_builder, "dcu_info_hide_btn")),
                     "clicked",
                     G_CALLBACK(on_bot_dcu_info_hide_clicked), NULL);


    g_signal_connect(GTK_COMBO_BOX(gtk_builder_get_object (bot_builder, "dcu_info_mode_combobox")),
                     "changed",
                     G_CALLBACK(on_bot_dcu_combobox_modified_clicked), NULL);

    g_signal_connect(GTK_COMBO_BOX(gtk_builder_get_object (bot_builder, "dcu_info_program_combobox")),
                     "changed",
                     G_CALLBACK(on_bot_dcu_combobox_modified_clicked), NULL);

    g_signal_connect(GTK_COMBO_BOX(gtk_builder_get_object (bot_builder, "lcu_control_combobox_mode")),
                     "changed",
                     G_CALLBACK(on_bot_lcu_control_mode_combobox_modified_clicked), NULL);

    g_signal_connect(GTK_WIDGET(bot_OBJECT("login_custom_expander")),
                     "button-press-event",
                     G_CALLBACK(on_bot_login_custom_expander), NULL);




//    g_signal_connect(GTK_BUTTON(gtk_builder_get_object (bot_builder, "dcu_program_update_btn")),
//                     "clicked",
//                     G_CALLBACK(on_bot_dcu_program_modified_clicked), NULL);
//
//    g_signal_connect(GTK_BUTTON(gtk_builder_get_object (bot_builder, "dcu_program_reload_btn")),
//                     "clicked",
//                     G_CALLBACK(on_bot_dcu_program_modified_clicked), NULL);

}
//gboolean
//on_login_dialog_response            (GtkDialog      *dialog,
//                                     gint           response_id,
//                                     gpointer       custom_data)
//{
//    switch(response_id)
//    {
//        case DIALOG_OK_RESPONSE:
//            gtk_widget_hide(main_widgets->login_dialog);
//            return TRUE;
//            break;
//
//        case DIALOG_CANCEL_RESPONSE:
//        default:
//            gtk_widget_hide(main_widgets->login_dialog);
//            return FALSE;
//            break;
//	}
//}

/*gboolean on_bot_dcu_specical_clicked(GtkTreeView *treeview, GdkEventButton *event, gpointer userdata)
{
    if (event->type == GDK_2BUTTON_PRESS || event->type == GDK_BUTTON_PRESS)
    {
        GtkTreeIter      iter;
        GtkTreeModel     *model;
        GtkTreeSelection *selection;


        selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(treeview));

        if (gtk_tree_selection_count_selected_rows(selection)  <= 1)
        {
            GtkTreePath *path;
            if (gtk_tree_view_get_path_at_pos(GTK_TREE_VIEW(treeview), (gint) event->x, (gint) event->y, &path, NULL, NULL, NULL))
            {
                gtk_tree_selection_unselect_all(selection);
                gtk_tree_selection_select_path(selection, path);
                gtk_tree_path_free(path);
            }
        }
        else
        {
            return FALSE;
        }

        if(gtk_tree_selection_get_selected(selection, &model, &iter))
        {
            if(event->type == GDK_2BUTTON_PRESS)
            {
                switch(event->button)
                {
                case 1:
                    DEBUG("\n ******** 2 event->button: %d\n", event->button);

                    gint row_type;
                    gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, TYPE_ROW_COMLUMN, &row_type, -1);

                    DEBUG("\n\n - Type of row is: %d", row_type);

                    if(row_type==(gint)DCU_TREE_STORE_DCU_TYPE)
                    {
                        gchar * dcu_id;
                        gchar * dcu_phone;
                        gchar * dcu_gps;
                        gchar * dcu_address;
                        gchar * dcu_note;
                        gchar * dcu_mode;
                        gchar * dcu_status;
                        gchar * dcu_lcu_program;
                        gchar * dcu_line_program;
                        gchar * dcu_zone_name;
                        gint dcu_zone_id;

                        GtkTreeIter      zone_iter;


                        gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, DCU_ZONE_NAME_COLUMN, &dcu_id,
                                                                         DCU_PHONE_COLUMN, &dcu_phone,
                                                                         DCU_GPS_COLUMN, &dcu_gps,
                                                                         DCU_ADDRESS_COLUMN, &dcu_address,
                                                                         DCU_NOTE_COLUMN, &dcu_note,
                                                                         DCU_MODE_COLUMN, &dcu_mode,
                                                                         DCU_STATUS_COLUMN, &dcu_status,
                                                                         -1);

                        if(gtk_tree_model_iter_parent(GTK_TREE_MODEL(model), &zone_iter, &iter))
                        {
                            gtk_tree_model_get(GTK_TREE_MODEL(model), &zone_iter, ZONE_ID_COLUMN, &dcu_zone_id,
                                                                             ZONE_NAME_COLUMN, &dcu_zone_name, -1);

                            bot_dcu_show_specific_info(dcu_id, dcu_phone, dcu_gps, dcu_address, dcu_note,
                                                                dcu_mode, dcu_status, dcu_lcu_program, dcu_line_program,
                                                                dcu_zone_id, dcu_zone_name);

                            g_free(dcu_zone_name);
                        }


                        g_free(dcu_id);
                        g_free(dcu_phone);
                        g_free(dcu_gps);
                        g_free(dcu_address);
                        g_free(dcu_note);
                        g_free(dcu_mode);
                        g_free(dcu_status);
                        g_free(dcu_lcu_program);
                        g_free(dcu_line_program);
                    }
                    break;
                case 2:
                    DEBUG("\n ******** 2 event->button: %d\n", event->button);
                    break;
                case 3:
                    DEBUG("\n ******** 2 event->button: %d\n", event->button);
                    break;
                default:
                    DEBUG("\n ******** 2 event->button is invalid\n");
                    break;
                }
            }
            else if(event->type == GDK_BUTTON_PRESS)
            {
                switch(event->button)
                {
                case 1:
                    DEBUG("\n ******** 1 event->button: %d\n", event->button);
                    break;
                case 2:
                    DEBUG("\n ******** 1 event->button: %d\n", event->button);
                    break;
                case 3:

                    DEBUG("\n ******** 1 event->button: %d\n", event->button);
                    gint row_type;
                    gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, TYPE_ROW_COMLUMN, &row_type, -1);
                    DEBUG("\n\n - Type of row is: %d", row_type);
                    if(row_type==(gint)DCU_TREE_STORE_DCU_TYPE)
                    {
                        bot_dcu_popup_menu_show(treeview, event, userdata);
                    }

                    break;
                default:
                    DEBUG("\n ******** 1 event->button is invalid\n");
                    break;
                }
            }
        }
    }
    return FALSE;
}
*/
gboolean on_bot_line_specical_clicked (GtkTreeView *treeview, GdkEventButton *event, gpointer userdata)
{
    if (event->type == GDK_2BUTTON_PRESS || event->type == GDK_BUTTON_PRESS)
    {
        GtkTreeIter      iter;
        GtkTreeModel     *model;
        GtkTreeSelection *selection;


        selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(treeview));

        if (gtk_tree_selection_count_selected_rows(selection)  <= 1)
        {
            GtkTreePath *path;
            if (gtk_tree_view_get_path_at_pos(GTK_TREE_VIEW(treeview), (gint) event->x, (gint) event->y, &path, NULL, NULL, NULL))
            {
                gtk_tree_selection_unselect_all(selection);
                gtk_tree_selection_select_path(selection, path);
                gtk_tree_path_free(path);
            }
        }
        else
        {
            return FALSE;
        }

        if(gtk_tree_selection_get_selected(selection, &model, &iter))
        {
            if(event->type == GDK_2BUTTON_PRESS)
            {
                switch(event->button)
                {
                case 1:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 2:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 3:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                default:
                    DEBUG("\n ******** event->button is invalid\n");
                    break;
                }
            }
            else if(event->type == GDK_BUTTON_PRESS)
            {
                switch(event->button)
                {
                case 1:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 2:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 3:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    bot_line_popup_menu_show(treeview, event, userdata);
                    break;
                default:
                    DEBUG("\n ******** event->button is invalid\n");
                    break;
                }
            }
        }
    }
    return FALSE;
}

gboolean on_bot_lcu_specical_clicked(GtkTreeView *treeview, GdkEventButton *event, gpointer userdata)
{
#if 0
    if (event->type == GDK_2BUTTON_PRESS || event->type == GDK_BUTTON_PRESS)
    {
        GtkTreeIter      iter;
        GtkTreeModel     *model;
        GtkTreeSelection *selection;


        selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(treeview));

        if (gtk_tree_selection_count_selected_rows(selection)  <= 1)
        {
            GtkTreePath *path;
            if (gtk_tree_view_get_path_at_pos(GTK_TREE_VIEW(treeview), (gint) event->x, (gint) event->y, &path, NULL, NULL, NULL))
            {
                gtk_tree_selection_unselect_all(selection);
                gtk_tree_selection_select_path(selection, path);
                gtk_tree_path_free(path);
            }
        }
        else
        {
            return FALSE;
        }

        if(gtk_tree_selection_get_selected(selection, &model, &iter))
        {
            if(event->type == GDK_2BUTTON_PRESS)
            {
                switch(event->button)
                {
                case 1:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 2:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 3:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                default:
                    DEBUG("\n ******** event->button is invalid\n");
                    break;
                }
            }
            else if(event->type == GDK_BUTTON_PRESS)
            {
                switch(event->button)
                {
                case 1:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 2:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 3:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    bot_lcu_popup_menu_show(treeview, event, userdata);
                    break;
                default:
                    DEBUG("\n ******** event->button is invalid\n");
                    break;
                }
            }
        }
    }
#else
    if (event->type == GDK_BUTTON_PRESS && event->button == 3)
    {
        DEBUG("\n event->button: %d", event->button);
       // bot_lcu_popup_menu_show(treeview, event, userdata);
    }
#endif // 0
    return FALSE;
}

gboolean on_bot_dcu_choose_start_time(GtkButton *button, gpointer userdata)
{
//    bot_dcu_choose_time();
}

gboolean on_bot_dcu_update(GtkButton *button, gpointer userdata)
{
    //bot_dcu_update();
}


gboolean
on_bot_schedule_specical_clicked (GtkTreeView        *treeview,
                                             GdkEventButton     *event,
                                             gpointer           userdata)
{
    if (event->type == GDK_2BUTTON_PRESS || event->type == GDK_BUTTON_PRESS)
    {
        GtkTreeIter      iter;
        GtkTreeModel     *model;
        GtkTreeSelection *selection;


        selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(treeview));

        if (gtk_tree_selection_count_selected_rows(selection)  <= 1)
        {
            GtkTreePath *path;
            if (gtk_tree_view_get_path_at_pos(GTK_TREE_VIEW(treeview), (gint) event->x, (gint) event->y, &path, NULL, NULL, NULL))
            {
                gtk_tree_selection_unselect_all(selection);
                gtk_tree_selection_select_path(selection, path);
                gtk_tree_path_free(path);
            }
        }
        else
        {
            return FALSE;
        }

        if(gtk_tree_selection_get_selected(selection, &model, &iter))
        {
            if(event->type == GDK_2BUTTON_PRESS)
            {
                switch(event->button)
                {
                case 1:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 2:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 3:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                default:
                    DEBUG("\n ******** event->button is invalid\n");
                    break;
                }
            }
            else if(event->type == GDK_BUTTON_PRESS)
            {
                switch(event->button)
                {
                case 1:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 2:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 3:
                    DEBUG("\n ******** event->button: %d\n", event->button);

                    gint row_type;
                    gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, SCHEDULE_TYPE_COLUMN, &row_type, -1);

                    DEBUG("\n\n - Type of row is: %d", row_type);

                    switch(row_type)
                    {
                    case SCHEDULE_MONTH_COL_INDEX:
                        bot_schedule_day_popup_menu_show(treeview, event, NULL);
                        break;
                    case SCHEDULE_NAME_COL_INDEX:
                        bot_schedule_list_popup_menu_show(treeview, event, NULL);
                        break;
                    case SCHEDULE_CONTENT_COL_INDEX:
//                        bot_schedule_item_popup_menu_show(treeview, event, NULL);
                        break;
                    default:
                        break;
                    };

                    break;
                default:
                    DEBUG("\n ******** event->button is invalid\n");
                    break;
                }
            }
        }
    }
    return FALSE;
}


gboolean
on_bot_schedule_item_specical_clicked(GtkTreeView        *treeview,
                                                    GdkEventButton     *event,
                                                    gpointer           userdata)
{
    if (event->type == GDK_2BUTTON_PRESS || event->type == GDK_BUTTON_PRESS)
    {
        GtkTreeIter      iter;
        GtkTreeModel     *model;
        GtkTreeSelection *selection;


        selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(treeview));

        if (gtk_tree_selection_count_selected_rows(selection)  <= 1)
        {
            GtkTreePath *path;
            if (gtk_tree_view_get_path_at_pos(GTK_TREE_VIEW(treeview), (gint) event->x, (gint) event->y, &path, NULL, NULL, NULL))
            {
                gtk_tree_selection_unselect_all(selection);
                gtk_tree_selection_select_path(selection, path);
                gtk_tree_path_free(path);
            }
        }
        else
        {
            return FALSE;
        }

        if(gtk_tree_selection_get_selected(selection, &model, &iter))
        {
            if(event->type == GDK_2BUTTON_PRESS)
            {
                switch(event->button)
                {
                case 1:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 2:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 3:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                default:
                    DEBUG("\n ******** event->button is invalid\n");
                    break;
                }
            }
            else if(event->type == GDK_BUTTON_PRESS)
            {
                switch(event->button)
                {
                case 1:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 2:
                    DEBUG("\n ******** event->button: %d\n", event->button);
                    break;
                case 3:
                    DEBUG("\n ******** event->button: %d\n", event->button);

                    gint row_type;
                    gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, ITEM_SCHEDULE_TYPE_COLUMN, &row_type, -1);

                    DEBUG("\n\n - Type of row is: %d", row_type);

                    switch(row_type)
                    {
                    case SCHEDULE_MONTH_COL_INDEX:
                        break;
                    case SCHEDULE_NAME_COL_INDEX:
                        bot_schedule_item_name_popup_menu_show(treeview, event, NULL);
                        break;
                    case SCHEDULE_CONTENT_COL_INDEX:
                        bot_schedule_item_content_popup_menu_show(treeview, event, NULL);
                        break;
                    default:
                        break;
                    };

                    break;
                default:
                    DEBUG("\n ******** event->button is invalid\n");
                    break;
                }
            }
        }
    }
    return FALSE;
}

gboolean
on_bot_program_year_treeview_clicked (GtkTreeView        *treeview,
                                                    GdkEventButton     *event,
                                                    gpointer           userdata)
{
    if (event->type == GDK_2BUTTON_PRESS || event->type == GDK_BUTTON_PRESS)
    {
        GtkTreeIter      iter;
        GtkTreeModel     *model;
        GtkTreeSelection *selection;

        selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(treeview));

        if (gtk_tree_selection_count_selected_rows(selection)  <= 1)
        {
            GtkTreePath *path;
            if (gtk_tree_view_get_path_at_pos(GTK_TREE_VIEW(treeview), (gint) event->x, (gint) event->y, &path, NULL, NULL, NULL))
            {
                gtk_tree_selection_unselect_all(selection);
                gtk_tree_selection_select_path(selection, path);
                gtk_tree_path_free(path);
            }
        }
        else
        {
            return FALSE;
        }

        if(gtk_tree_selection_get_selected(selection, &model, &iter))
        {
            if(event->type == GDK_2BUTTON_PRESS)
            {
                switch(event->button)
                {
                case 1:
                    DEBUG("\n ******** 2 event->button: %d\n", event->button);
                    gint program_id;
                    gint type_column;

                    gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, PROGRAM_TYPE_COLUMN, &type_column, -1);

                    DEBUG("type_column: %d", type_column);
                    if(type_column!=PROGRAM_NAME_COL_INDEX)
                    {
                        gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, PROGRAM_ID_COLUMN, &program_id, -1);
                        bot_program_year_show_specific(program_id);
                    }

                    break;
                case 2:
                    DEBUG("\n ******** 2 event->button: %d\n", event->button);
                    break;
                case 3:
                    DEBUG("\n ******** 2 event->button: %d\n", event->button);
                    break;
                default:
                    DEBUG("\n ******** 2 event->button is invalid\n");
                    break;
                }
            }
            else if(event->type == GDK_BUTTON_PRESS)
            {
                switch(event->button)
                {
                case 1:
                    DEBUG("\n ******** 1 event->button: %d\n", event->button);
                    break;
                case 2:
                    DEBUG("\n ******** 1 event->button: %d\n", event->button);
                    break;
                case 3:
                    DEBUG("\n ******** 1 event->button: %d\n", event->button);
                    gint program_id;
                    gint type_column;

                    gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, PROGRAM_TYPE_COLUMN, &type_column, -1);

                    DEBUG("type_column: %d", type_column);
                    if(type_column!=PROGRAM_NAME_COL_INDEX)
                    {
                        bot_program_popup_menu_show(treeview, event, userdata);
                        /** Tai sao lai roi ham nay o vi tri nay ??? **/
//                        bot_program_year_show_specific(program_id);
                    }
                    else
                    {
                        bot_program_year_show_specific(program_id);
                    }
                    break;
                default:
                    DEBUG("\n ******** 1 event->button is invalid\n");
                    break;
                }
            }
        }
    }
    return FALSE;
}

gboolean on_bot_main_notebook_switch_page (GtkNotebook *notebook,
                                               GtkWidget   *page,
                                               guint        page_num,
                                               gpointer     user_data)
{
    DEBUG_1();
    DEBUG("=============== page_num: %d", page_num);
    bot_NOTEBOOK_PAGE_Enum page_index = (bot_NOTEBOOK_PAGE_Enum) page_num;

    switch(page_index)
    {
    case bot_NOTEBOOK_DCU_PAGE:
        break;
    case bot_NOTEBOOK_PROGRAM_PAGE:
        break;
    case bot_NOTEBOOK_USER_LOG_PAGE:
        break;
    case bot_NOTEBOOK_SERVER_LOG_PAGE:
        break;
    default:
        break;
    };

    return FALSE;
}


gboolean on_bot_dcu_program_modified_clicked(GtkButton *button, gpointer userdata)
{
    gtk_widget_set_sensitive(GTK_WIDGET(bot_OBJECT("dcu_info_mode_combobox")), TRUE);
    gtk_widget_set_sensitive(GTK_WIDGET(bot_OBJECT("dcu_info_program_combobox")), TRUE);

    gtk_widget_set_visible(GTK_WIDGET(bot_OBJECT("dcu_program_reload_btn")), TRUE);
    gtk_widget_set_visible(GTK_WIDGET(bot_OBJECT("dcu_program_update_btn")), TRUE);

    const gchar *current_dcu_id = gtk_label_get_text(GTK_LABEL(gtk_builder_get_object (bot_builder, "lb_dcu_id")));
//    bot_program_change(current_dcu_id);
}

gboolean on_bot_dcu_info_modified_clicked(GtkButton *button, gpointer userdata)
{
   // bot_dcu_info_edit();
}

void on_bot_dcu_combobox_modified_clicked (GtkComboBox *widget, gpointer user_data)
{
    gtk_widget_set_sensitive(GTK_WIDGET(bot_OBJECT("dcu_program_update_btn")), TRUE);
    gtk_widget_set_sensitive(GTK_WIDGET(bot_OBJECT("dcu_program_reload_btn")), TRUE);
}

void on_bot_lcu_control_mode_combobox_modified_clicked (GtkComboBox *widget, gpointer user_data)
{
//    bot_lcu_control_mode_combobox_change();
}

void
on_bot_schedule_timeon_on_change (GtkAdjustment *adjustment,
                                                  gpointer       user_data)
{
    DEBUG("\n === change value is: %d", gtk_adjustment_get_value(adjustment));
}

gboolean
on_bot_login_custom_expander  (GtkWidget *widget,
                                            GdkEvent  *event,
                                            gpointer   user_data)
{
    if(gtk_expander_get_expanded(GTK_EXPANDER(bot_OBJECT("login_custom_expander"))))
    {
        DEBUG_1();
    }
    else
    {
        DEBUG_1();
    }
    return TRUE;
}
void bot_dcu_popup_menu_clicked(GtkWidget *popup_menu_item, gpointer userdata)
{
    bot_DCU_POPUP_MENU_Enum type = (bot_DCU_POPUP_MENU_Enum)GPOINTER_TO_INT(userdata);
    switch(type)
    {
    case bot_DCU_M_ADD:
        gboolean add_result;
        do
        {
            add_result = bot_dcu_add_new();
            add_result = TRUE;
        }
        while(!add_result);
        break;
    case bot_DCU_M_EDIT:
        bot_dcu_edit(lastSelectedDcu);
        break;
    case bot_DCU_M_LOG:
        bot_dcu_view_log(lastSelectedDcu);
        //bot_dcu_popup_menu_log_clicked();
        break;
    case bot_DCU_M_SCHEDULE:
        //bot_dcu_popup_menu_schedule_clicked();
        break;
    case bot_DCU_M_REMOVE:
        {
            GtkWidget *mesbox = gtk_message_dialog_new(GTK_WINDOW(main_widgets->add_dcu_dialog),
                                                       GTK_DIALOG_DESTROY_WITH_PARENT,
                                                       GTK_MESSAGE_WARNING, GTK_BUTTONS_OK_CANCEL, "Bạn có chắc muốn xóa trạm này, tất cả các đèn thuộc trạm này sẽ bị xóa");
            gtk_widget_show(mesbox);
            gint resp;
            while(resp = gtk_dialog_run(GTK_DIALOG(mesbox)))
            {
                switch(resp)
                {
                case GTK_RESPONSE_OK:
                    {
                        if(lastSelectedDcu)
                        {
                            pbotDcu dcuRemove = lastSelectedDcu;
                            if(bot_dcu_remove_execute(bot_username,
                                                           bot_session_id,
                                                           dcuRemove->priv->id))
                            {
                                //clear this dcu on treeview
                                if(gtk_tree_store_remove(main_view_widgets->dcu_store, &dcuRemove->priv->iter))
                                {
                                    bot_delete_all_lcu_on_dcu(dcuRemove); //delete all his child
                                    dculist = g_slist_remove(dculist, dcuRemove); //delete this
                                }
                            }
                        }
                        DEBUG("OK\n");
                    }
                    break;
                case GTK_RESPONSE_CANCEL:
                    DEBUG("CANCEL\n");
                default:
                    break;
                }
                gtk_widget_destroy(mesbox);
                return;
            }
        }
        //bot_dcu_popup_menu_remove_clicked();
        break;
    case bot_DCU_M_REMOVE_ALL:
        //bot_dcu_popup_menu_remove_all_clicked();
        break;
    default:
        break;
    }
}

void bot_lcu_popup_menu_clicked(GtkWidget *w, gpointer usr_data)
{
    gint type = GPOINTER_TO_INT(usr_data);
    switch(type)
    {
        case bot_LCU_M_ADD:
            bot_light_add_new();
            break;
        case bot_LCU_M_ADD_FROM_FILE:
            //bot_light_add_new_from_file();
            break;
        case bot_LCU_M_EDIT:
            bot_light_edit(selectedLcu);
            break;
        case bot_LCU_M_REMOVE:
            //bot_light_remove(selectedLcu);
            break;
        case bot_LCU_M_REMOVE_ALL:
            //bot_delete_all_lcu_on_dcu(lastSelectedDcu);
            break;
        case bot_LCU_M_CONTROL:
            bot_lcu_popup_menu_control(selectedLcu);
            break;
        default:
            break;
    }
}

void bot_popup_menu_show(GtkWidget *w, GdkEventButton *ev)
{
    gtk_widget_show_all(w);
    gtk_menu_popup(GTK_MENU(w), NULL, NULL, NULL, NULL,
                   (ev != NULL) ? ev->button : 0, gdk_event_get_time((GdkEvent*)ev));

}

